{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_createBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "createPoolEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ethBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpTokenBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "liquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ethBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpTokenBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "liquidityRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_first",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_second",
          "type": "uint256"
        }
      ],
      "name": "test",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_useraddress",
          "type": "address"
        }
      ],
      "name": "userAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMapping",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMappingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmountEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_removeLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_swapEthToToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedAmount",
          "type": "uint256"
        }
      ],
      "name": "_swapTokenToEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x267f273fd6b4eab10159724e500a20dda1b513a0e983b4449cf6c577e388179b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "3327533",
    "logsBloom": "0x
    "blockHash": "0xd3891701fcde4cc810fa618a55af77a5a67860dfe911c24355c822b37fc0fe78",
    "transactionHash": "0x267f273fd6b4eab10159724e500a20dda1b513a0e983b4449cf6c577e388179b",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "3327533",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cc2a7fa9b5f6cf79ba9ccf267b575e50",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_createBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"createPoolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidityRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_first\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_second\",\"type\":\"uint256\"}],\"name\":\"test\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"userAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMapping\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMappingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmountEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_removeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_swapEthToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedAmount\",\"type\":\"uint256\"}],\"name\":\"_swapTokenToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex.sol\":\"Dex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Dex {\\n    Pool public  pool;\\n    event userAddress (address indexed _useraddress);\\n    event createPoolEvent (address indexed _createBy, address indexed _token ,uint256 indexed _id);\\n    event liquidity (address indexed _from, uint256 indexed _lpTokenSupply, uint256 indexed _mintedAmount, uint256 _ethBalance, uint256 _lpTokenBalance, uint256 _amount);\\n    event liquidityRemove (address indexed _from, uint256 indexed _lpTokenSupply, uint256 indexed _mintedAmount, uint256 _ethBalance, uint256 _lpTokenBalance, uint256 _amount );\\n    event test (uint256 indexed _first, uint256 indexed _second);\\n    mapping (uint256 => Pool) public PoolMapping;\\n    mapping (uint256 => address) public PoolMappingAddress;\\n    uint256 public counter;\\n    constructor () payable{}\\n\\n     function getPoolAddress(uint256 _pool) public view returns(address){\\n        return address(PoolMapping[_pool]);\\n    }\\n\\n    function createPool(address tokenA) public payable {\\n        pool = new Pool(tokenA);\\n        PoolMapping[counter] = pool;\\n        emit createPoolEvent(msg.sender, address(pool), counter);\\n        emit userAddress (address(pool));\\n        counter += 1;\\n    }\\n\\n    \\n    function _addLiquidity(uint256 _pool, uint256 _amount) public payable {\\n        require(_amount >= msg.value, \\\"to little amount\\\");\\n        pool =  Pool(payable(address(PoolMapping[_pool])));\\n        (address from, uint256 lpTotalSupply, uint256 _estimatedAmount, uint256 _ethReserve,  uint256 lpTokenBalance) = pool.addLiquidity{ value: msg.value }(_amount, msg.sender);\\n        emit liquidity(from, lpTotalSupply, _estimatedAmount, _ethReserve, lpTokenBalance, _amount);\\n    }\\n\\n    function _removeLiquidity(uint256 _pool, uint256 _amount) public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool]))); \\n        (address from, uint256 lpTotalSupply, uint256 _estimatedAmount, uint256 _ethReserve,  uint256 lpTokenBalance) = pool.removeLiquidity(_amount, msg.sender);\\n        emit liquidityRemove(from, lpTotalSupply, _estimatedAmount, _ethReserve, lpTokenBalance, _amount);\\n    }\\n\\n    function _swapTokenToEth(uint256 _pool, uint256 _amount, uint256 _estimatedAmount)  public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.swapTokenToEth{ value: msg.value }(_amount, _estimatedAmount, msg.sender);\\n        //if true return the values needed here in an event\\n    }\\n\\n    function _swapEthToToken(uint256 _pool, uint256 _amount)  public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.swapEthToToken{ value: msg.value }(_amount, msg.sender);\\n    }\\n    \\n    function _getSwapAmount(uint256 _pool, uint256 _amount)  public returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.getSwapAmountDai(_amount);\\n    }\\n    function _getSwapAmountEth(uint256 _pool, uint256 _amount)  public payable returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.getSwapAmountEth{value: msg.value }(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x72d7307781f1b956b00536e3ad788a1fc8660b71ca09ae968fea1b737f1d444c\",\"license\":\"MIT\"},\"contracts/LIToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract LIToken is ERC20{\\n    event minted(address indexed _user, uint256 indexed _amount);\\n    event burned(address indexed _user, uint256 indexed _amount);\\n\\n    constructor() ERC20('Lp', 'LPToken'){\\n    }\\n\\n    function mint(address _sender, uint256 _amount) external {\\n        emit minted(_sender, _amount);\\n        _mint(_sender, _amount);\\n    }\\n\\n    function burn(address _sender, uint256 _amount) external {\\n         emit burned(_sender, _amount);\\n        _burn(_sender, _amount);\\n    }\\n\\n    function _totalSupply() public view returns(uint256){\\n         return totalSupply();\\n    }\\n\\n    function _balanceOf(address _from) public view returns(uint256){\\n         return balanceOf(_from);\\n    }\\n}\",\"keccak256\":\"0x302dbb2f88eaf76cf08f2aec7db36e11695469cdd3c45a8def61a3b144184d41\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./LIToken.sol\\\";\\n\\n//Skapa den h\\u00e4r kontrakten som en pool ist\\u00e4llet och den h\\u00e4r poolen har allts\\u00e5 sin egna address.\\n//Poolen ska d\\u00e4refter kunna kallas fr\\u00e5n en annan Kontrakt som ska vara sj\\u00e4lva Dex och ta hand om varje pool som exisiterar.\\n//D\\u00e4rf\\u00f6r g\\u00f6r om denna kontrakt s\\u00e5 att den \\u00e4r kopplad till eth msg.value() ist\\u00e4llet f\\u00f6r \\\"weth\\\" sen skapa den riktiga Dex \\\"manage\\\" kontrakten.\\n//I Dex kontraktet spara alla olika pools i en mapping och kalla deras funktioner med hj\\u00e4lp av en \\n\\ncontract Pool is IERC20, LIToken {\\n    LIToken public lpToken;\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    address public erc20TokenAddress;\\n    mapping(address => uint256) WethMapping;\\n    event tokenSwap(address indexed token, address indexed swapper, string indexed swap, uint256 _amount);\\n    event liquidityPool( uint256 indexed amount, address indexed provider, uint256 indexed reserve);\\n\\n    event balancesCheck(address _from, uint256 indexed totalSupply, uint256 indexed ethBalance, uint256 indexed ethBackToUser, uint256 liquidityBackToUser);\\n    event balanceCall(uint256 indexed _amount, uint256 indexed _secondamount);\\n\\n\\n    constructor(address _erc20TokenAddress) {\\n        require(_erc20TokenAddress != address(0));\\n        erc20TokenAddress = _erc20TokenAddress;\\n        lpToken = new LIToken();\\n    }\\n\\n    function getReserve() public payable returns(uint256) {\\n        uint256 balaceGet = IERC20(erc20TokenAddress).balanceOf(address(this));\\n        return balaceGet;\\n    }\\n\\n    function addLiquidity (uint _amount, address _sender) public payable returns (address, uint256, uint256, uint256, uint256) {\\n        uint256 daiReserve = getReserve();\\n        uint256 _ethReserve = address(this).balance - msg.value;\\n        if(daiReserve == 0){\\n            lpToken.mint(_sender, _amount);\\n            IERC20(erc20TokenAddress).transferFrom(_sender, address(this), _amount);\\n\\n           return (_sender, lpToken._totalSupply(), daiReserve, _ethReserve, lpToken._balanceOf(_sender));\\n        }else{\\n        uint256 acceptedLiquidityAmount = (msg.value * daiReserve) / (_ethReserve);\\n        require(_amount >= acceptedLiquidityAmount, \\\"not accepted liquidity less then the minimum amount accepted\\\");\\n        /*IERC20(erc20TokenAddress).approve(address(this), acceptedLiquidityAmount);*/\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), acceptedLiquidityAmount);\\n        uint256 mintokens = (lpToken._totalSupply() * msg.value) / (_ethReserve);\\n        lpToken.mint(_sender, mintokens);    \\n        emit balancesCheck(_sender, _amount, acceptedLiquidityAmount, _ethReserve, msg.value);\\n\\n        return (_sender, lpToken._totalSupply(), mintokens, _ethReserve, lpToken._balanceOf(_sender));\\n        }\\n       \\n    }\\n    // remove liquidity\\n    function removeLiquidity(uint _amount, address _sender) public payable returns (address, uint256, uint256, uint256, uint256) {\\n        require(_amount >= 0, \\\"to little amount\\\");  \\n        uint256 tokenBalance = lpToken._balanceOf(_sender);\\n        lpToken.burn(_sender, _amount);\\n        IERC20(erc20TokenAddress).approve(address(this), (IERC20(erc20TokenAddress).balanceOf(address(this)) * _amount) / lpToken._totalSupply());\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, (IERC20(erc20TokenAddress).balanceOf(address(this)) * _amount) / lpToken._totalSupply());\\n        uint256 ethBack = address(this).balance * _amount / lpToken._totalSupply();\\n        (bool call, bytes memory data) = _sender.call{value: ethBack}(\\\"\\\");\\n        return (_sender, lpToken._totalSupply(), _amount, address(this).balance, lpToken._balanceOf(_sender));\\n    }\\n   \\n\\n     function getSwapAmountEth(uint256 _amount) public payable returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - _amount;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (_amount + fullEthReserve);\\n        emit balanceCall(_amount, outputAmount);\\n        return outputAmount;\\n    }\\n\\n    function getSwapAmountDai(uint256 _amount) public returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\\n        //emit balancesCheck (ethReserve, erc20Reserve ,inputAmountFee, outputAmount);\\n        emit balanceCall(outputAmount, fullErc20Reserve);\\n        return outputAmount;\\n    }\\n\\n    function swapEthToToken(uint256 _amount, address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 inputAmountFee = msg.value * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (msg.value + fullEthReserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        require(outputAmount >= _amount, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(address(this), outputAmount);\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, outputAmount);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"eth/token\\\", outputAmount);\\n    }\\n\\n    function swapTokenToEth(uint256 _amount, uint256 _ethBackToUser ,address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        require(outputAmount >= _ethBackToUser, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(_sender, outputAmount);\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), outputAmount);\\n        (bool call, bytes memory data) = _sender.call{value: outputAmount}(\\\"\\\");\\n        //emit transferSwap(outputAmount, data, call);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"token/eth\\\", outputAmount);\\n        emit balancesCheck (_sender, ethReserve, fullErc20Reserve ,inputAmountFee, outputAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x40c10d77d17b39487e2bc9f07488b6b11c2ff9a1bed83473d587ae94047244c6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052613b43806100136000396000f3fe6080604052600436106100a65760003560e01c80631697b54d116100645780631697b54d146101b357806316f0115b146101c657806361bc221a146101e65780639049f9d2146101fc5780639e8af2af1461020f578063ecc861d01461022257600080fd5b8062a5ae21146100ab57806304c55b92146100fe5780630b6af776146101345780631269e22f1461014957806315f08f2c1461015c57806316095f6c14610192575b600080fd5b3480156100b757600080fd5b506100e16100c63660046107f7565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e16101193660046107f7565b6001602052600090815260409020546001600160a01b031681565b610147610142366004610810565b610242565b005b610147610157366004610810565b610355565b34801561016857600080fd5b506100e16101773660046107f7565b6002602052600090815260409020546001600160a01b031681565b6101a56101a0366004610810565b6103db565b6040519081526020016100f5565b6101476101c1366004610832565b61047e565b3480156101d257600080fd5b506000546100e1906001600160a01b031681565b3480156101f257600080fd5b506101a560035481565b61014761020a366004610876565b61050c565b61014761021d366004610810565b610604565b34801561022e57600080fd5b506101a561023d366004610810565b61074f565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516305fe138b60e01b81526004810184905233602482015282918291829182916305fe138b9060440160a060405180830381600087803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea919061089a565b945094509450945094508284866001600160a01b03167f02613a8c3409a4eef205ce5358961a11bccee91adbb07c6aa1ad1435b17f3fc685858b604051610344939291909283526020830191909152604082015260600190565b60405180910390a450505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551636208d8e560e11b81526004810183905233602482015263c411b1ca9034906044016000604051808303818588803b1580156103be57600080fd5b505af11580156103d2573d6000803e3d6000fd5b50505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905263582cf7819034906024016020604051808303818588803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061047791906108e3565b5092915050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551635e16d9df60e01b81526004810184905260248101839052336044820152635e16d9df9034906064016000604051808303818588803b1580156104ee57600080fd5b505af1158015610502573d6000803e3d6000fd5b5050505050505050565b80604051610519906107e9565b6001600160a01b039091168152602001604051809103906000f080158015610545573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917ff86e3d2fc794443a042a24aab307e2450c5ea5ddde4894a5db19df1339e0e23b9190a4600080546040516001600160a01b03909116917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a26001600360008282546105fc91906108fc565b909155505050565b3481101561064b5760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516364afce8760e11b815260048101849052336024820152829182918291829163c95f9d0e90349060440160a0604051808303818588803b1580156106bc57600080fd5b505af11580156106d0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106f5919061089a565b945094509450945094508284866001600160a01b03167f516f4cc29abe02d3c74b1ba0ca67c9bd8943bdfaafc412ee060f29ff46122a9885858b604051610344939291909283526020830191909152604082015260600190565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905263de703e1090602401602060405180830381600087803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047791906108e3565b6131eb806200092383390190565b60006020828403121561080957600080fd5b5035919050565b6000806040838503121561082357600080fd5b50508035926020909101359150565b60008060006060848603121561084757600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461087357600080fd5b50565b60006020828403121561088857600080fd5b81356108938161085e565b9392505050565b600080600080600060a086880312156108b257600080fd5b85516108bd8161085e565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6000602082840312156108f557600080fd5b5051919050565b6000821982111561091d57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b50604051620031eb380380620031eb8339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d4980620024a283390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b612257806200024b6000396000f3fe6080604052600436106101435760003560e01c80635fcbd285116100b0578063c411b1ca1161006c578063c411b1ca146103a9578063c95f9d0e146103bc578063cca3e832146103cf578063dd62ed3e146103ef578063de703e101461040f578063f835cd3c1461042f57005b80635fcbd285146102c657806370a08231146102fe57806395d89b41146103345780639dc29fac14610349578063a457c2d714610369578063a9059cbb1461038957005b806339509351116100ff57806339509351146102435780633eaaf86b1461026357806340c10f1914610278578063582cf7811461029857806359bf5d39146102ab5780635e16d9df146102b357005b806305fe138b1461014c57806306fdde0314610196578063095ea7b3146101b857806318160ddd146101e857806323b872dd14610207578063313ce5671461022757005b3661014a57005b005b61015f61015a366004611f49565b61044f565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b3480156101a257600080fd5b506101ab610a7c565b60405161018d9190611f75565b3480156101c457600080fd5b506101d86101d3366004611fca565b610b0e565b604051901515815260200161018d565b3480156101f457600080fd5b506002545b60405190815260200161018d565b34801561021357600080fd5b506101d8610222366004611ff4565b610b26565b34801561023357600080fd5b506040516012815260200161018d565b34801561024f57600080fd5b506101d861025e366004611fca565b610b4a565b34801561026f57600080fd5b506101f9610b6c565b34801561028457600080fd5b5061014a610293366004611fca565b610b7c565b6101f96102a6366004612030565b610bc0565b6101f9610c7f565b61014a6102c1366004612049565b610d05565b3480156102d257600080fd5b506005546102e6906001600160a01b031681565b6040516001600160a01b03909116815260200161018d565b34801561030a57600080fd5b506101f961031936600461207e565b6001600160a01b031660009081526020819052604090205490565b34801561034057600080fd5b506101ab610fea565b34801561035557600080fd5b5061014a610364366004611fca565b610ff9565b34801561037557600080fd5b506101d8610384366004611fca565b611039565b34801561039557600080fd5b506101d86103a4366004611fca565b6110b4565b61014a6103b7366004611f49565b6110c2565b61015f6103ca366004611f49565b61130e565b3480156103db57600080fd5b506101f96103ea36600461207e565b6118a0565b3480156103fb57600080fd5b506101f961040a3660046120a0565b6118be565b34801561041b57600080fd5b506101f961042a366004612030565b6118e9565b34801561043b57600080fd5b506006546102e6906001600160a01b031681565b600080808080610463565b60405180910390fd5b600554604051636651f41960e11b81526001600160a01b038881166004830152600092169063cca3e8329060240160206040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e191906120ca565b600554604051632770a7eb60e21b81526001600160a01b038a81166004830152602482018c9052929350911690639dc29fac90604401600060405180830381600087803b15801561053157600080fd5b505af1158015610545573d6000803e3d6000fd5b505060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416955063095ea7b39450309390921691633eaaf86b91600480820192602092909190829003018186803b15801561059d57600080fd5b505afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d591906120ca565b6006546040516370a0823160e01b81523060048201528d916001600160a01b0316906370a082319060240160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065091906120ca565b61065a91906120f9565b6106649190612118565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106aa57600080fd5b505af11580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e2919061213a565b5060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416936323b872dd9330938d939190921691633eaaf86b916004808301926020929190829003018186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077191906120ca565b6006546040516370a0823160e01b81523060048201528e916001600160a01b0316906370a082319060240160206040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906120ca565b6107f691906120f9565b6108009190612118565b6040518463ffffffff1660e01b815260040161081e9392919061215c565b602060405180830381600087803b15801561083857600080fd5b505af115801561084c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610870919061213a565b5060055460408051633eaaf86b60e01b815290516000926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b1580156108b657600080fd5b505afa1580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee91906120ca565b6108f88a476120f9565b6109029190612118565b9050600080896001600160a01b03168360405160006040518083038185875af1925050503d8060008114610952576040519150601f19603f3d011682016040523d82523d6000602084013e610957565b606091505b509150915089600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e391906120ca565b600554604051636651f41960e11b81526001600160a01b038e811660048301528f92479291169063cca3e8329060240160206040518083038186803b158015610a2b57600080fd5b505afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906120ca565b98509850985098509850505050505b9295509295909350565b606060038054610a8b90612180565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab790612180565b8015610b045780601f10610ad957610100808354040283529160200191610b04565b820191906000526020600020905b815481529060010190602001808311610ae757829003601f168201915b5050505050905090565b600033610b1c81858561199b565b5060019392505050565b600033610b34858285611ac0565b610b3f858585611b3a565b506001949350505050565b600033610b1c818585610b5d83836118be565b610b6791906121bb565b61199b565b6000610b7760025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a3610bbc8282611d08565b5050565b600080610bcb610c7f565b90506000610bd984476121d3565b90506000610be88560636120f9565b90506000610bf78360646120f9565b9050600083118015610c095750600084115b610c255760405162461bcd60e51b815260040161045a906121ea565b6000610c3182886121bb565b610c3b86856120f9565b610c459190612118565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff91906120ca565b92915050565b6000610d0f610c7f565b9050476000610d1f8660636120f9565b90506000610d2e8460646120f9565b9050600084118015610d405750600083115b610d5c5760405162461bcd60e51b815260040161045a906121ea565b6000610d6882896121bb565b610d7285856120f9565b610d7c9190612118565b905086811015610dce5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161045a565b60065460405163095ea7b360e01b81526001600160a01b038881166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b158015610e1c57600080fd5b505af1158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e54919061213a565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e899089903090869060040161215c565b602060405180830381600087803b158015610ea357600080fd5b505af1158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb919061213a565b50600080876001600160a01b03168360405160006040518083038185875af1925050503d8060008114610f2a576040519150601f19603f3d011682016040523d82523d6000602084013e610f2f565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a4604080516001600160a01b038a168152602081018590528691869189917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a450505050505050505050565b606060048054610a8b90612180565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a3610bbc8282611de7565b6000338161104782866118be565b9050838110156110a75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161045a565b610b3f828686840361199b565b600033610b1c818585611b3a565b60006110cc610c7f565b905060006110da34476121d3565b905060006110e93460636120f9565b905060006110f88360646120f9565b905060008311801561110a5750600084115b6111265760405162461bcd60e51b815260040161045a906121ea565b600061113282346121bb565b61113c86856120f9565b6111469190612118565b9050868110156111985760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161045a565b60065460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b1580156111e457600080fd5b505af11580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c919061213a565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906112519030908a90869060040161215c565b602060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a3919061213a565b506040516832ba3417ba37b5b2b760b91b815260090160405190819003812060065483835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a450505050505050565b60008060008060008061131f610c7f565b9050600061132d34476121d3565b90508161152e576005546040516340c10f1960e01b81526001600160a01b038a81166004830152602482018c9052909116906340c10f1990604401600060405180830381600087803b15801561138257600080fd5b505af1158015611396573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd91506113ce908b9030908e9060040161215c565b602060405180830381600087803b1580156113e857600080fd5b505af11580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611420919061213a565b5060055460408051633eaaf86b60e01b815290518a926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d91906120ca565b600554604051636651f41960e11b81526001600160a01b038c811660048301528692869291169063cca3e8329060240160206040518083038186803b1580156114e557600080fd5b505afa1580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d91906120ca565b965096509650965096505050610a72565b60008161153b84346120f9565b6115459190612118565b9050808a10156115bd5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e7420616363657074656400000000606482015260840161045a565b6006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906115f1908c903090869060040161215c565b602060405180830381600087803b15801561160b57600080fd5b505af115801561161f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611643919061213a565b5060008234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce91906120ca565b6116d891906120f9565b6116e29190612118565b6005546040516340c10f1960e01b81526001600160a01b038d81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561173257600080fd5b505af1158015611746573d6000803e3d6000fd5b5050604080516001600160a01b038e1681523460208201528693508592508e917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a460055460408051633eaaf86b60e01b815290518c926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b1580156117d557600080fd5b505afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d91906120ca565b600554604051636651f41960e11b81526001600160a01b038e811660048301528592889291169063cca3e8329060240160206040518083038186803b15801561185557600080fd5b505afa158015611869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188d91906120ca565b9850985098509850985050505050610a72565b6001600160a01b038116600090815260208190526040812054610cff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000806118f4610c7f565b90504760006119048560636120f9565b905060006119138460646120f9565b90506000841180156119255750600083115b6119415760405162461bcd60e51b815260040161045a906121ea565b600061194d82886121bb565b61195785856120f9565b6119619190612118565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b0383166119fd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161045a565b6001600160a01b038216611a5e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161045a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611acc84846118be565b90506000198114611b345781811015611b275760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161045a565b611b34848484840361199b565b50505050565b6001600160a01b038316611b9e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161045a565b6001600160a01b038216611c005760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161045a565b6001600160a01b03831660009081526020819052604090205481811015611c785760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161045a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611caf9084906121bb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cfb91815260200190565b60405180910390a3611b34565b6001600160a01b038216611d5e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161045a565b8060026000828254611d7091906121bb565b90915550506001600160a01b03821660009081526020819052604081208054839290611d9d9084906121bb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216611e475760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161045a565b6001600160a01b03821660009081526020819052604090205481811015611ebb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161045a565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611eea9084906121d3565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611ab3565b80356001600160a01b0381168114611f4457600080fd5b919050565b60008060408385031215611f5c57600080fd5b82359150611f6c60208401611f2d565b90509250929050565b600060208083528351808285015260005b81811015611fa257858101830151858201604001528201611f86565b81811115611fb4576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611fdd57600080fd5b611fe683611f2d565b946020939093013593505050565b60008060006060848603121561200957600080fd5b61201284611f2d565b925061202060208501611f2d565b9150604084013590509250925092565b60006020828403121561204257600080fd5b5035919050565b60008060006060848603121561205e57600080fd5b833592506020840135915061207560408501611f2d565b90509250925092565b60006020828403121561209057600080fd5b61209982611f2d565b9392505050565b600080604083850312156120b357600080fd5b6120bc83611f2d565b9150611f6c60208401611f2d565b6000602082840312156120dc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612113576121136120e3565b500290565b60008261213557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561214c57600080fd5b8151801515811461209957600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c9082168061219457607f821691505b602082108114156121b557634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156121ce576121ce6120e3565b500190565b6000828210156121e5576121e56120e3565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e7400000000000000000060408201526060019056fea26469706673582212207391e23b0d7532c1d8055d42d1775f358fdeb785f29ffc43fa43a4e9996df57d64736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bdc806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f1911610097578063a457c2d711610066578063a457c2d7146101e3578063a9059cbb146101f6578063cca3e8321461019f578063dd62ed3e1461020957600080fd5b806340c10f191461018a57806370a082311461019f57806395d89b41146101c85780639dc29fac146101d057600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f5780633eaaf86b1461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b61010261021c565b60405161010f91906109fa565b60405180910390f35b61012b610126366004610a6b565b6102ae565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610a95565b6102c6565b6040516012815260200161010f565b61012b61017d366004610a6b565b6102ea565b61013f61030c565b61019d610198366004610a6b565b61031c565b005b61013f6101ad366004610ad1565b6001600160a01b031660009081526020819052604090205490565b610102610360565b61019d6101de366004610a6b565b61036f565b61012b6101f1366004610a6b565b6103af565b61012b610204366004610a6b565b61042f565b61013f610217366004610af3565b61043d565b60606003805461022b90610b26565b80601f016020809104026020016040519081016040528092919081815260200182805461025790610b26565b80156102a45780601f10610279576101008083540402835291602001916102a4565b820191906000526020600020905b81548152906001019060200180831161028757829003601f168201915b5050505050905090565b6000336102bc818585610468565b5060019392505050565b6000336102d485828561058d565b6102df858585610607565b506001949350505050565b6000336102bc8185856102fd838361043d565b6103079190610b77565b610468565b600061031760025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361035c82826107d5565b5050565b60606004805461022b90610b26565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361035c82826108b4565b600033816103bd828661043d565b9050838110156104225760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102df8286868403610468565b6000336102bc818585610607565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104ca5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610419565b6001600160a01b03821661052b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610419565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610599848461043d565b9050600019811461060157818110156105f45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610419565b6106018484848403610468565b50505050565b6001600160a01b03831661066b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610419565b6001600160a01b0382166106cd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610419565b6001600160a01b038316600090815260208190526040902054818110156107455760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610419565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061077c908490610b77565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c891815260200190565b60405180910390a3610601565b6001600160a01b03821661082b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610419565b806002600082825461083d9190610b77565b90915550506001600160a01b0382166000908152602081905260408120805483929061086a908490610b77565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166109145760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610419565b6001600160a01b038216600090815260208190526040902054818110156109885760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610419565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109b7908490610b8f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610580565b600060208083528351808285015260005b81811015610a2757858101830151858201604001528201610a0b565b81811115610a39576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a6657600080fd5b919050565b60008060408385031215610a7e57600080fd5b610a8783610a4f565b946020939093013593505050565b600080600060608486031215610aaa57600080fd5b610ab384610a4f565b9250610ac160208501610a4f565b9150604084013590509250925092565b600060208284031215610ae357600080fd5b610aec82610a4f565b9392505050565b60008060408385031215610b0657600080fd5b610b0f83610a4f565b9150610b1d60208401610a4f565b90509250929050565b600181811c90821680610b3a57607f821691505b60208210811415610b5b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b8a57610b8a610b61565b500190565b600082821015610ba157610ba1610b61565b50039056fea2646970667358221220bad6fe7a7b6f4a27ea984750192acf26a46c9f8109322387e09d27c06b35803864736f6c63430008080033a2646970667358221220f0742c8b0e73a4ecc68e0dc624770e9b996ab6154970077346586dadb836d0cf64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a65760003560e01c80631697b54d116100645780631697b54d146101b357806316f0115b146101c657806361bc221a146101e65780639049f9d2146101fc5780639e8af2af1461020f578063ecc861d01461022257600080fd5b8062a5ae21146100ab57806304c55b92146100fe5780630b6af776146101345780631269e22f1461014957806315f08f2c1461015c57806316095f6c14610192575b600080fd5b3480156100b757600080fd5b506100e16100c63660046107f7565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e16101193660046107f7565b6001602052600090815260409020546001600160a01b031681565b610147610142366004610810565b610242565b005b610147610157366004610810565b610355565b34801561016857600080fd5b506100e16101773660046107f7565b6002602052600090815260409020546001600160a01b031681565b6101a56101a0366004610810565b6103db565b6040519081526020016100f5565b6101476101c1366004610832565b61047e565b3480156101d257600080fd5b506000546100e1906001600160a01b031681565b3480156101f257600080fd5b506101a560035481565b61014761020a366004610876565b61050c565b61014761021d366004610810565b610604565b34801561022e57600080fd5b506101a561023d366004610810565b61074f565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516305fe138b60e01b81526004810184905233602482015282918291829182916305fe138b9060440160a060405180830381600087803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea919061089a565b945094509450945094508284866001600160a01b03167f02613a8c3409a4eef205ce5358961a11bccee91adbb07c6aa1ad1435b17f3fc685858b604051610344939291909283526020830191909152604082015260600190565b60405180910390a450505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551636208d8e560e11b81526004810183905233602482015263c411b1ca9034906044016000604051808303818588803b1580156103be57600080fd5b505af11580156103d2573d6000803e3d6000fd5b50505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905263582cf7819034906024016020604051808303818588803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061047791906108e3565b5092915050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551635e16d9df60e01b81526004810184905260248101839052336044820152635e16d9df9034906064016000604051808303818588803b1580156104ee57600080fd5b505af1158015610502573d6000803e3d6000fd5b5050505050505050565b80604051610519906107e9565b6001600160a01b039091168152602001604051809103906000f080158015610545573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917ff86e3d2fc794443a042a24aab307e2450c5ea5ddde4894a5db19df1339e0e23b9190a4600080546040516001600160a01b03909116917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a26001600360008282546105fc91906108fc565b909155505050565b3481101561064b5760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516364afce8760e11b815260048101849052336024820152829182918291829163c95f9d0e90349060440160a0604051808303818588803b1580156106bc57600080fd5b505af11580156106d0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106f5919061089a565b945094509450945094508284866001600160a01b03167f516f4cc29abe02d3c74b1ba0ca67c9bd8943bdfaafc412ee060f29ff46122a9885858b604051610344939291909283526020830191909152604082015260600190565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905263de703e1090602401602060405180830381600087803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047791906108e3565b6131eb806200092383390190565b60006020828403121561080957600080fd5b5035919050565b6000806040838503121561082357600080fd5b50508035926020909101359150565b60008060006060848603121561084757600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461087357600080fd5b50565b60006020828403121561088857600080fd5b81356108938161085e565b9392505050565b600080600080600060a086880312156108b257600080fd5b85516108bd8161085e565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6000602082840312156108f557600080fd5b5051919050565b6000821982111561091d57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b50604051620031eb380380620031eb8339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d4980620024a283390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b612257806200024b6000396000f3fe6080604052600436106101435760003560e01c80635fcbd285116100b0578063c411b1ca1161006c578063c411b1ca146103a9578063c95f9d0e146103bc578063cca3e832146103cf578063dd62ed3e146103ef578063de703e101461040f578063f835cd3c1461042f57005b80635fcbd285146102c657806370a08231146102fe57806395d89b41146103345780639dc29fac14610349578063a457c2d714610369578063a9059cbb1461038957005b806339509351116100ff57806339509351146102435780633eaaf86b1461026357806340c10f1914610278578063582cf7811461029857806359bf5d39146102ab5780635e16d9df146102b357005b806305fe138b1461014c57806306fdde0314610196578063095ea7b3146101b857806318160ddd146101e857806323b872dd14610207578063313ce5671461022757005b3661014a57005b005b61015f61015a366004611f49565b61044f565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b3480156101a257600080fd5b506101ab610a7c565b60405161018d9190611f75565b3480156101c457600080fd5b506101d86101d3366004611fca565b610b0e565b604051901515815260200161018d565b3480156101f457600080fd5b506002545b60405190815260200161018d565b34801561021357600080fd5b506101d8610222366004611ff4565b610b26565b34801561023357600080fd5b506040516012815260200161018d565b34801561024f57600080fd5b506101d861025e366004611fca565b610b4a565b34801561026f57600080fd5b506101f9610b6c565b34801561028457600080fd5b5061014a610293366004611fca565b610b7c565b6101f96102a6366004612030565b610bc0565b6101f9610c7f565b61014a6102c1366004612049565b610d05565b3480156102d257600080fd5b506005546102e6906001600160a01b031681565b6040516001600160a01b03909116815260200161018d565b34801561030a57600080fd5b506101f961031936600461207e565b6001600160a01b031660009081526020819052604090205490565b34801561034057600080fd5b506101ab610fea565b34801561035557600080fd5b5061014a610364366004611fca565b610ff9565b34801561037557600080fd5b506101d8610384366004611fca565b611039565b34801561039557600080fd5b506101d86103a4366004611fca565b6110b4565b61014a6103b7366004611f49565b6110c2565b61015f6103ca366004611f49565b61130e565b3480156103db57600080fd5b506101f96103ea36600461207e565b6118a0565b3480156103fb57600080fd5b506101f961040a3660046120a0565b6118be565b34801561041b57600080fd5b506101f961042a366004612030565b6118e9565b34801561043b57600080fd5b506006546102e6906001600160a01b031681565b600080808080610463565b60405180910390fd5b600554604051636651f41960e11b81526001600160a01b038881166004830152600092169063cca3e8329060240160206040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e191906120ca565b600554604051632770a7eb60e21b81526001600160a01b038a81166004830152602482018c9052929350911690639dc29fac90604401600060405180830381600087803b15801561053157600080fd5b505af1158015610545573d6000803e3d6000fd5b505060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416955063095ea7b39450309390921691633eaaf86b91600480820192602092909190829003018186803b15801561059d57600080fd5b505afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d591906120ca565b6006546040516370a0823160e01b81523060048201528d916001600160a01b0316906370a082319060240160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065091906120ca565b61065a91906120f9565b6106649190612118565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106aa57600080fd5b505af11580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e2919061213a565b5060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416936323b872dd9330938d939190921691633eaaf86b916004808301926020929190829003018186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077191906120ca565b6006546040516370a0823160e01b81523060048201528e916001600160a01b0316906370a082319060240160206040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906120ca565b6107f691906120f9565b6108009190612118565b6040518463ffffffff1660e01b815260040161081e9392919061215c565b602060405180830381600087803b15801561083857600080fd5b505af115801561084c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610870919061213a565b5060055460408051633eaaf86b60e01b815290516000926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b1580156108b657600080fd5b505afa1580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee91906120ca565b6108f88a476120f9565b6109029190612118565b9050600080896001600160a01b03168360405160006040518083038185875af1925050503d8060008114610952576040519150601f19603f3d011682016040523d82523d6000602084013e610957565b606091505b509150915089600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e391906120ca565b600554604051636651f41960e11b81526001600160a01b038e811660048301528f92479291169063cca3e8329060240160206040518083038186803b158015610a2b57600080fd5b505afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906120ca565b98509850985098509850505050505b9295509295909350565b606060038054610a8b90612180565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab790612180565b8015610b045780601f10610ad957610100808354040283529160200191610b04565b820191906000526020600020905b815481529060010190602001808311610ae757829003601f168201915b5050505050905090565b600033610b1c81858561199b565b5060019392505050565b600033610b34858285611ac0565b610b3f858585611b3a565b506001949350505050565b600033610b1c818585610b5d83836118be565b610b6791906121bb565b61199b565b6000610b7760025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a3610bbc8282611d08565b5050565b600080610bcb610c7f565b90506000610bd984476121d3565b90506000610be88560636120f9565b90506000610bf78360646120f9565b9050600083118015610c095750600084115b610c255760405162461bcd60e51b815260040161045a906121ea565b6000610c3182886121bb565b610c3b86856120f9565b610c459190612118565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff91906120ca565b92915050565b6000610d0f610c7f565b9050476000610d1f8660636120f9565b90506000610d2e8460646120f9565b9050600084118015610d405750600083115b610d5c5760405162461bcd60e51b815260040161045a906121ea565b6000610d6882896121bb565b610d7285856120f9565b610d7c9190612118565b905086811015610dce5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161045a565b60065460405163095ea7b360e01b81526001600160a01b038881166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b158015610e1c57600080fd5b505af1158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e54919061213a565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e899089903090869060040161215c565b602060405180830381600087803b158015610ea357600080fd5b505af1158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb919061213a565b50600080876001600160a01b03168360405160006040518083038185875af1925050503d8060008114610f2a576040519150601f19603f3d011682016040523d82523d6000602084013e610f2f565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a4604080516001600160a01b038a168152602081018590528691869189917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a450505050505050505050565b606060048054610a8b90612180565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a3610bbc8282611de7565b6000338161104782866118be565b9050838110156110a75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161045a565b610b3f828686840361199b565b600033610b1c818585611b3a565b60006110cc610c7f565b905060006110da34476121d3565b905060006110e93460636120f9565b905060006110f88360646120f9565b905060008311801561110a5750600084115b6111265760405162461bcd60e51b815260040161045a906121ea565b600061113282346121bb565b61113c86856120f9565b6111469190612118565b9050868110156111985760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161045a565b60065460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b1580156111e457600080fd5b505af11580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c919061213a565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906112519030908a90869060040161215c565b602060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a3919061213a565b506040516832ba3417ba37b5b2b760b91b815260090160405190819003812060065483835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a450505050505050565b60008060008060008061131f610c7f565b9050600061132d34476121d3565b90508161152e576005546040516340c10f1960e01b81526001600160a01b038a81166004830152602482018c9052909116906340c10f1990604401600060405180830381600087803b15801561138257600080fd5b505af1158015611396573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd91506113ce908b9030908e9060040161215c565b602060405180830381600087803b1580156113e857600080fd5b505af11580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611420919061213a565b5060055460408051633eaaf86b60e01b815290518a926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d91906120ca565b600554604051636651f41960e11b81526001600160a01b038c811660048301528692869291169063cca3e8329060240160206040518083038186803b1580156114e557600080fd5b505afa1580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d91906120ca565b965096509650965096505050610a72565b60008161153b84346120f9565b6115459190612118565b9050808a10156115bd5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e7420616363657074656400000000606482015260840161045a565b6006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906115f1908c903090869060040161215c565b602060405180830381600087803b15801561160b57600080fd5b505af115801561161f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611643919061213a565b5060008234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce91906120ca565b6116d891906120f9565b6116e29190612118565b6005546040516340c10f1960e01b81526001600160a01b038d81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561173257600080fd5b505af1158015611746573d6000803e3d6000fd5b5050604080516001600160a01b038e1681523460208201528693508592508e917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a460055460408051633eaaf86b60e01b815290518c926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b1580156117d557600080fd5b505afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d91906120ca565b600554604051636651f41960e11b81526001600160a01b038e811660048301528592889291169063cca3e8329060240160206040518083038186803b15801561185557600080fd5b505afa158015611869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188d91906120ca565b9850985098509850985050505050610a72565b6001600160a01b038116600090815260208190526040812054610cff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000806118f4610c7f565b90504760006119048560636120f9565b905060006119138460646120f9565b90506000841180156119255750600083115b6119415760405162461bcd60e51b815260040161045a906121ea565b600061194d82886121bb565b61195785856120f9565b6119619190612118565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b0383166119fd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161045a565b6001600160a01b038216611a5e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161045a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611acc84846118be565b90506000198114611b345781811015611b275760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161045a565b611b34848484840361199b565b50505050565b6001600160a01b038316611b9e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161045a565b6001600160a01b038216611c005760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161045a565b6001600160a01b03831660009081526020819052604090205481811015611c785760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161045a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611caf9084906121bb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cfb91815260200190565b60405180910390a3611b34565b6001600160a01b038216611d5e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161045a565b8060026000828254611d7091906121bb565b90915550506001600160a01b03821660009081526020819052604081208054839290611d9d9084906121bb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216611e475760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161045a565b6001600160a01b03821660009081526020819052604090205481811015611ebb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161045a565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611eea9084906121d3565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611ab3565b80356001600160a01b0381168114611f4457600080fd5b919050565b60008060408385031215611f5c57600080fd5b82359150611f6c60208401611f2d565b90509250929050565b600060208083528351808285015260005b81811015611fa257858101830151858201604001528201611f86565b81811115611fb4576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611fdd57600080fd5b611fe683611f2d565b946020939093013593505050565b60008060006060848603121561200957600080fd5b61201284611f2d565b925061202060208501611f2d565b9150604084013590509250925092565b60006020828403121561204257600080fd5b5035919050565b60008060006060848603121561205e57600080fd5b833592506020840135915061207560408501611f2d565b90509250925092565b60006020828403121561209057600080fd5b61209982611f2d565b9392505050565b600080604083850312156120b357600080fd5b6120bc83611f2d565b9150611f6c60208401611f2d565b6000602082840312156120dc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612113576121136120e3565b500290565b60008261213557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561214c57600080fd5b8151801515811461209957600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c9082168061219457607f821691505b602082108114156121b557634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156121ce576121ce6120e3565b500190565b6000828210156121e5576121e56120e3565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e7400000000000000000060408201526060019056fea26469706673582212207391e23b0d7532c1d8055d42d1775f358fdeb785f29ffc43fa43a4e9996df57d64736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bdc806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f1911610097578063a457c2d711610066578063a457c2d7146101e3578063a9059cbb146101f6578063cca3e8321461019f578063dd62ed3e1461020957600080fd5b806340c10f191461018a57806370a082311461019f57806395d89b41146101c85780639dc29fac146101d057600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f5780633eaaf86b1461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b61010261021c565b60405161010f91906109fa565b60405180910390f35b61012b610126366004610a6b565b6102ae565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610a95565b6102c6565b6040516012815260200161010f565b61012b61017d366004610a6b565b6102ea565b61013f61030c565b61019d610198366004610a6b565b61031c565b005b61013f6101ad366004610ad1565b6001600160a01b031660009081526020819052604090205490565b610102610360565b61019d6101de366004610a6b565b61036f565b61012b6101f1366004610a6b565b6103af565b61012b610204366004610a6b565b61042f565b61013f610217366004610af3565b61043d565b60606003805461022b90610b26565b80601f016020809104026020016040519081016040528092919081815260200182805461025790610b26565b80156102a45780601f10610279576101008083540402835291602001916102a4565b820191906000526020600020905b81548152906001019060200180831161028757829003601f168201915b5050505050905090565b6000336102bc818585610468565b5060019392505050565b6000336102d485828561058d565b6102df858585610607565b506001949350505050565b6000336102bc8185856102fd838361043d565b6103079190610b77565b610468565b600061031760025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361035c82826107d5565b5050565b60606004805461022b90610b26565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361035c82826108b4565b600033816103bd828661043d565b9050838110156104225760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102df8286868403610468565b6000336102bc818585610607565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104ca5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610419565b6001600160a01b03821661052b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610419565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610599848461043d565b9050600019811461060157818110156105f45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610419565b6106018484848403610468565b50505050565b6001600160a01b03831661066b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610419565b6001600160a01b0382166106cd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610419565b6001600160a01b038316600090815260208190526040902054818110156107455760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610419565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061077c908490610b77565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c891815260200190565b60405180910390a3610601565b6001600160a01b03821661082b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610419565b806002600082825461083d9190610b77565b90915550506001600160a01b0382166000908152602081905260408120805483929061086a908490610b77565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166109145760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610419565b6001600160a01b038216600090815260208190526040902054818110156109885760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610419565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109b7908490610b8f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610580565b600060208083528351808285015260005b81811015610a2757858101830151858201604001528201610a0b565b81811115610a39576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a6657600080fd5b919050565b60008060408385031215610a7e57600080fd5b610a8783610a4f565b946020939093013593505050565b600080600060608486031215610aaa57600080fd5b610ab384610a4f565b9250610ac160208501610a4f565b9150604084013590509250925092565b600060208284031215610ae357600080fd5b610aec82610a4f565b9392505050565b60008060408385031215610b0657600080fd5b610b0f83610a4f565b9150610b1d60208401610a4f565b90509250929050565b600181811c90821680610b3a57607f821691505b60208210811415610b5b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b8a57610b8a610b61565b500190565b600082821015610ba157610ba1610b61565b50039056fea2646970667358221220bad6fe7a7b6f4a27ea984750192acf26a46c9f8109322387e09d27c06b35803864736f6c63430008080033a2646970667358221220f0742c8b0e73a4ecc68e0dc624770e9b996ab6154970077346586dadb836d0cf64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/Dex.sol:Dex",
        "label": "pool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Pool)1878"
      },
      {
        "astId": 768,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Pool)1878)"
      },
      {
        "astId": 772,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMappingAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 774,
        "contract": "contracts/Dex.sol:Dex",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Pool)1878": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_contract(Pool)1878)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Pool)",
        "numberOfBytes": "32",
        "value": "t_contract(Pool)1878"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}