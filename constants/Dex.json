{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_createBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "createPoolEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ethBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lpTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "liquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ethBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lpTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "liquidityRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_first",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_second",
          "type": "uint256"
        }
      ],
      "name": "test",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_useraddress",
          "type": "address"
        }
      ],
      "name": "userAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMapping",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMappingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmountEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_removeLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_swapEthToToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedAmount",
          "type": "uint256"
        }
      ],
      "name": "_swapTokenToEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3e5a20d0f4824f21d007a7d2ea524dbe19790d5a86704143b905314ab918adc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "3335149",
    "logsBloom": "0x
    "blockHash": "0x2e81a09a1daef5de4f36aa545471bdfacba9e2864e157f9dc0d7c47b75853832",
    "transactionHash": "0xd3e5a20d0f4824f21d007a7d2ea524dbe19790d5a86704143b905314ab918adc",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "3335149",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cc80e0703876a71408566ae9959a7ea0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_createBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"createPoolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpTokenBalance\",\"type\":\"uint256\"}],\"name\":\"liquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpTokenBalance\",\"type\":\"uint256\"}],\"name\":\"liquidityRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_first\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_second\",\"type\":\"uint256\"}],\"name\":\"test\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"userAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMapping\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMappingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmountEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_removeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_swapEthToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedAmount\",\"type\":\"uint256\"}],\"name\":\"_swapTokenToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex.sol\":\"Dex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Dex {\\n    Pool public  pool;\\n    event userAddress (address indexed _useraddress);\\n    event createPoolEvent (address indexed _createBy, address indexed _token ,uint256 indexed _id);\\n    event liquidity (address indexed _from, uint256 indexed _lpTokenSupply, uint256 indexed _mintedAmount, uint256 _ethBalance, address _lpTokenAddress, uint256 _amount, uint256 _lpTokenBalance);\\n    event liquidityRemove (address indexed _from, uint256 indexed _lpTokenSupply, uint256 indexed _mintedAmount, uint256 _ethBalance, address _lpTokenAddress, uint256 _amount, uint256 _lpTokenBalance );\\n    event test (uint256 indexed _first, uint256 indexed _second);\\n    mapping (uint256 => Pool) public PoolMapping;\\n    mapping (uint256 => address) public PoolMappingAddress;\\n    uint256 public counter;\\n    constructor () payable{}\\n\\n     function getPoolAddress(uint256 _pool) public view returns(address){\\n        return address(PoolMapping[_pool]);\\n    }\\n\\n    function createPool(address tokenA) public payable {\\n        pool = new Pool(tokenA);\\n        PoolMapping[counter] = pool;\\n        emit createPoolEvent(msg.sender, address(pool), counter);\\n        emit userAddress (address(pool));\\n        counter += 1;\\n    }\\n\\n    \\n    function _addLiquidity(uint256 _pool, uint256 _amount) public payable {\\n        require(_amount >= msg.value, \\\"to little amount\\\");\\n        pool =  Pool(payable(address(PoolMapping[_pool])));\\n        (address from, uint256 lpTotalSupply, uint256 _estimatedAmount, uint256 _ethReserve,  address lpTokenAddress, uint256 _lpTokenBalance) = pool.addLiquidity{ value: msg.value }(_amount, msg.sender);\\n        emit liquidity(from, lpTotalSupply, _estimatedAmount, _ethReserve, lpTokenAddress, _amount, _lpTokenBalance);\\n    }\\n\\n    function _removeLiquidity(uint256 _pool, uint256 _amount) public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool]))); \\n        (address from, uint256 lpTotalSupply, uint256 _estimatedAmount, uint256 _ethReserve,  address lpTokenAddress, uint256 _lpTokenBalance) = pool.removeLiquidity(_amount, msg.sender);\\n        emit liquidityRemove(from, lpTotalSupply, _estimatedAmount, _ethReserve, lpTokenAddress, _amount, _lpTokenBalance);\\n    }\\n\\n    function _swapTokenToEth(uint256 _pool, uint256 _amount, uint256 _estimatedAmount)  public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.swapTokenToEth{ value: msg.value }(_amount, _estimatedAmount, msg.sender);\\n        //if true return the values needed here in an event\\n    }\\n\\n    function _swapEthToToken(uint256 _pool, uint256 _amount)  public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.swapEthToToken{ value: msg.value }(_amount, msg.sender);\\n    }\\n    \\n    function _getSwapAmount(uint256 _pool, uint256 _amount)  public returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.getSwapAmountDai(_amount);\\n    }\\n    function _getSwapAmountEth(uint256 _pool, uint256 _amount)  public payable returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.getSwapAmountEth{value: msg.value }(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x674621fd12ed8f5ca645c5106a4c5b31f78c431147d83cb1feca004680103a2d\",\"license\":\"MIT\"},\"contracts/LIToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract LIToken is ERC20{\\n    event minted(address indexed _user, uint256 indexed _amount);\\n    event burned(address indexed _user, uint256 indexed _amount);\\n\\n    constructor() ERC20('Lp', 'LPToken'){\\n    }\\n\\n    function mint(address _sender, uint256 _amount) external {\\n        emit minted(_sender, _amount);\\n        _mint(_sender, _amount);\\n    }\\n\\n    function burn(address _sender, uint256 _amount) external {\\n         emit burned(_sender, _amount);\\n        _burn(_sender, _amount);\\n    }\\n\\n    function _totalSupply() public view returns(uint256){\\n         return totalSupply();\\n    }\\n\\n    function _balanceOf(address _from) public view returns(uint256){\\n         return balanceOf(_from);\\n    }\\n\\n    function _getAddresLp() public view returns(address){\\n         return address(this);\\n    }\\n\\n}\",\"keccak256\":\"0x687ddc01a5ac2aa7bdce1dc11907d9912a27b021981264d3f7300c24a466de53\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./LIToken.sol\\\";\\n\\n//Skapa den h\\u00e4r kontrakten som en pool ist\\u00e4llet och den h\\u00e4r poolen har allts\\u00e5 sin egna address.\\n//Poolen ska d\\u00e4refter kunna kallas fr\\u00e5n en annan Kontrakt som ska vara sj\\u00e4lva Dex och ta hand om varje pool som exisiterar.\\n//D\\u00e4rf\\u00f6r g\\u00f6r om denna kontrakt s\\u00e5 att den \\u00e4r kopplad till eth msg.value() ist\\u00e4llet f\\u00f6r \\\"weth\\\" sen skapa den riktiga Dex \\\"manage\\\" kontrakten.\\n//I Dex kontraktet spara alla olika pools i en mapping och kalla deras funktioner med hj\\u00e4lp av en \\n\\ncontract Pool is IERC20, LIToken {\\n    LIToken public lpToken;\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    address public erc20TokenAddress;\\n    mapping(address => uint256) WethMapping;\\n    event tokenSwap(address indexed token, address indexed swapper, string indexed swap, uint256 _amount);\\n    event liquidityPool( uint256 indexed amount, address indexed provider, uint256 indexed reserve);\\n\\n    event balancesCheck(address _from, uint256 indexed totalSupply, uint256 indexed ethBalance, uint256 indexed ethBackToUser, uint256 liquidityBackToUser);\\n    event balanceCall(uint256 indexed _amount, uint256 indexed _secondamount);\\n\\n\\n    constructor(address _erc20TokenAddress) {\\n        require(_erc20TokenAddress != address(0));\\n        erc20TokenAddress = _erc20TokenAddress;\\n        lpToken = new LIToken();\\n    }\\n\\n    function getReserve() public payable returns(uint256) {\\n        uint256 balaceGet = IERC20(erc20TokenAddress).balanceOf(address(this));\\n        return balaceGet;\\n    }\\n \\n    function addLiquidity (uint _amount, address _sender) public payable returns (address, uint256, uint256, uint256, address, uint256) {\\n        uint256 daiReserve = getReserve();\\n        uint256 _ethReserve = address(this).balance - msg.value;\\n        if(daiReserve == 0){\\n            lpToken.mint(_sender, _amount);\\n            IERC20(erc20TokenAddress).transferFrom(_sender, address(this), _amount);\\n    \\n           return (_sender, lpToken._totalSupply(), daiReserve, address(this).balance, address(lpToken), lpToken._balanceOf(_sender));\\n        }else{\\n\\n        require(_amount >= (msg.value * daiReserve) / (_ethReserve), \\\"not accepted liquidity less then the minimum amount accepted\\\");\\n        /*IERC20(erc20TokenAddress).approve(address(this), acceptedLiquidityAmount);*/\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), (msg.value * daiReserve) / (_ethReserve));\\n      \\n        lpToken.mint(_sender, (lpToken._totalSupply() * msg.value) / (_ethReserve));    \\n        // emit balancesCheck(_sender, _amount, acceptedLiquidityAmount, _ethReserve, msg.value);\\n    \\n        return (_sender, lpToken._totalSupply(), (lpToken._totalSupply() * msg.value) / (_ethReserve), address(this).balance, address(lpToken), lpToken._balanceOf(_sender));\\n        }\\n    }\\n    // remove liquidity\\n    function removeLiquidity(uint _amount, address _sender) public payable returns (address, uint256, uint256, uint256, address, uint256) {\\n        require(_amount >= 0, \\\"little amount\\\");  \\n        lpToken.burn(_sender, _amount);\\n        IERC20(erc20TokenAddress).approve(address(this), (IERC20(erc20TokenAddress).balanceOf(address(this)) * _amount) / lpToken._totalSupply());\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, (IERC20(erc20TokenAddress).balanceOf(address(this)) * _amount) / lpToken._totalSupply());\\n        (bool call, bytes memory data) = _sender.call{value: address(this).balance * _amount / lpToken._totalSupply()}(\\\"\\\");\\n        return (_sender, lpToken._totalSupply(), _amount, address(this).balance, address(lpToken),  lpToken._balanceOf(_sender));\\n    }\\n   \\n\\n     function getSwapAmountEth(uint256 _amount) public payable returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - _amount;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (_amount + fullEthReserve);\\n        emit balanceCall(_amount, outputAmount);\\n        return outputAmount;\\n    }\\n\\n    function getSwapAmountDai(uint256 _amount) public returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\\n        //emit balancesCheck (ethReserve, erc20Reserve ,inputAmountFee, outputAmount);\\n        emit balanceCall(outputAmount, fullErc20Reserve);\\n        return outputAmount;\\n    }\\n\\n    function swapEthToToken(uint256 _amount, address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 inputAmountFee = msg.value * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (msg.value + fullEthReserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        require(outputAmount >= _amount, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(address(this), outputAmount);\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, outputAmount);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"eth/token\\\", outputAmount);\\n    }\\n\\n    function swapTokenToEth(uint256 _amount, uint256 _ethBackToUser ,address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        require(outputAmount >= _ethBackToUser, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(_sender, outputAmount);\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), outputAmount);\\n        (bool call, bytes memory data) = _sender.call{value: outputAmount}(\\\"\\\");\\n        //emit transferSwap(outputAmount, data, call);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"token/eth\\\", outputAmount);\\n        emit balancesCheck (_sender, ethReserve, fullErc20Reserve ,inputAmountFee, outputAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x395323a02fbd8c7db497048dbbc2cc2309f44804e4ff5a3aef74dbf7a8f33a3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052613b66806100136000396000f3fe6080604052600436106100a65760003560e01c80631697b54d116100645780631697b54d146101b357806316f0115b146101c657806361bc221a146101e65780639049f9d2146101fc5780639e8af2af1461020f578063ecc861d01461022257600080fd5b8062a5ae21146100ab57806304c55b92146100fe5780630b6af776146101345780631269e22f1461014957806315f08f2c1461015c57806316095f6c14610192575b600080fd5b3480156100b757600080fd5b506100e16100c6366004610822565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e1610119366004610822565b6001602052600090815260409020546001600160a01b031681565b61014761014236600461083b565b610242565b005b61014761015736600461083b565b61036b565b34801561016857600080fd5b506100e1610177366004610822565b6002602052600090815260409020546001600160a01b031681565b6101a56101a036600461083b565b6103f1565b6040519081526020016100f5565b6101476101c136600461085d565b610494565b3480156101d257600080fd5b506000546100e1906001600160a01b031681565b3480156101f257600080fd5b506101a560035481565b61014761020a3660046108a1565b610522565b61014761021d36600461083b565b61061a565b34801561022e57600080fd5b506101a561023d36600461083b565b61077a565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516305fe138b60e01b81526004810184905233602482015282918291829182918291906305fe138b9060440160c060405180830381600087803b1580156102b557600080fd5b505af11580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed91906108c5565b9550955095509550955095508385876001600160a01b03167f91f41706171150ad632c6f151afafdca5d7f2680e2e10b6cd658bcde18e8beff86868c8760405161035994939291909384526001600160a01b039290921660208401526040830152606082015260800190565b60405180910390a45050505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551636208d8e560e11b81526004810183905233602482015263c411b1ca9034906044016000604051808303818588803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b50505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905263582cf7819034906024016020604051808303818588803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061048d9190610925565b5092915050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551635e16d9df60e01b81526004810184905260248101839052336044820152635e16d9df9034906064016000604051808303818588803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b5050505050505050565b8060405161052f90610814565b6001600160a01b039091168152602001604051809103906000f08015801561055b573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917ff86e3d2fc794443a042a24aab307e2450c5ea5ddde4894a5db19df1339e0e23b9190a4600080546040516001600160a01b03909116917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a2600160036000828254610612919061093e565b909155505050565b348110156106615760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516364afce8760e11b815260048101849052336024820152829182918291829182919063c95f9d0e90349060440160c0604051808303818588803b1580156106d557600080fd5b505af11580156106e9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061070e91906108c5565b9550955095509550955095508385876001600160a01b03167f6fedf9115d4715efc6ef1b1b404a33d364c206a7411db093413e6ed6f59b519286868c8760405161035994939291909384526001600160a01b039290921660208401526040830152606082015260800190565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905263de703e1090602401602060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d9190610925565b6131cc806200096583390190565b60006020828403121561083457600080fd5b5035919050565b6000806040838503121561084e57600080fd5b50508035926020909101359150565b60008060006060848603121561087257600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461089e57600080fd5b50565b6000602082840312156108b357600080fd5b81356108be81610889565b9392505050565b60008060008060008060c087890312156108de57600080fd5b86516108e981610889565b80965050602087015194506040870151935060608701519250608087015161091081610889565b8092505060a087015190509295509295509295565b60006020828403121561093757600080fd5b5051919050565b6000821982111561095f57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b50604051620031cc380380620031cc8339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d62806200246a83390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b61221f806200024b6000396000f3fe60806040526004361061015b5760003560e01c80635fcbd285116100c8578063a9059cbb11610084578063cca3e83211610061578063cca3e83214610407578063dd62ed3e14610427578063de703e1014610447578063f835cd3c1461046757005b8063a9059cbb146103c1578063c411b1ca146103e1578063c95f9d0e146103f457005b80635fcbd285146102eb57806370a082311461032357806394d0851d1461035957806395d89b411461036c5780639dc29fac14610381578063a457c2d7146103a157005b8063395093511161011757806339509351146102685780633eaaf86b1461028857806340c10f191461029d578063582cf781146102bd57806359bf5d39146102d05780635e16d9df146102d857005b806305fe138b1461016457806306fdde03146101bb578063095ea7b3146101dd57806318160ddd1461020d57806323b872dd1461022c578063313ce5671461024c57005b3661016257005b005b610177610172366004611f11565b610487565b604080516001600160a01b03978816815260208101969096528501939093526060840191909152909216608082015260a081019190915260c0015b60405180910390f35b3480156101c757600080fd5b506101d0610a39565b6040516101b29190611f3d565b3480156101e957600080fd5b506101fd6101f8366004611f92565b610acb565b60405190151581526020016101b2565b34801561021957600080fd5b506002545b6040519081526020016101b2565b34801561023857600080fd5b506101fd610247366004611fbc565b610ae3565b34801561025857600080fd5b50604051601281526020016101b2565b34801561027457600080fd5b506101fd610283366004611f92565b610b07565b34801561029457600080fd5b5061021e610b29565b3480156102a957600080fd5b506101626102b8366004611f92565b610b39565b61021e6102cb366004611ff8565b610b7d565b61021e610c3c565b6101626102e6366004612011565b610cc2565b3480156102f757600080fd5b5060055461030b906001600160a01b031681565b6040516001600160a01b0390911681526020016101b2565b34801561032f57600080fd5b5061021e61033e366004612046565b6001600160a01b031660009081526020819052604090205490565b34801561036557600080fd5b503061030b565b34801561037857600080fd5b506101d0610fa7565b34801561038d57600080fd5b5061016261039c366004611f92565b610fb6565b3480156103ad57600080fd5b506101fd6103bc366004611f92565b610ff6565b3480156103cd57600080fd5b506101fd6103dc366004611f92565b611071565b6101626103ef366004611f11565b61107f565b610177610402366004611f11565b6112cb565b34801561041357600080fd5b5061021e610422366004612046565b611868565b34801561043357600080fd5b5061021e610442366004612068565b611886565b34801561045357600080fd5b5061021e610462366004611ff8565b6118b1565b34801561047357600080fd5b5060065461030b906001600160a01b031681565b6000808080808061049c565b60405180910390fd5b600554604051632770a7eb60e21b81526001600160a01b038981166004830152602482018b905290911690639dc29fac90604401600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b505060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416955063095ea7b39450309390921691633eaaf86b91600480820192602092909190829003018186803b15801561055657600080fd5b505afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190612092565b6006546040516370a0823160e01b81523060048201528d916001600160a01b0316906370a082319060240160206040518083038186803b1580156105d157600080fd5b505afa1580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190612092565b61061391906120c1565b61061d91906120e0565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561066357600080fd5b505af1158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190612102565b5060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416936323b872dd9330938d939190921691633eaaf86b916004808301926020929190829003018186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190612092565b6006546040516370a0823160e01b81523060048201528e916001600160a01b0316906370a082319060240160206040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190612092565b6107af91906120c1565b6107b991906120e0565b6040518463ffffffff1660e01b81526004016107d793929190612124565b602060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190612102565b50600080886001600160a01b0316600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612092565b6108c78c476120c1565b6108d191906120e0565b604051600081818185875af1925050503d806000811461090d576040519150601f19603f3d011682016040523d82523d6000602084013e610912565b606091505b509150915088600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190612092565b600554604051636651f41960e11b81526001600160a01b038d811660048301528e924792911690819063cca3e8329060240160206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190612092565b97509750975097509750975050505b9295509295509295565b606060038054610a4890612148565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7490612148565b8015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b5050505050905090565b600033610ad9818585611963565b5060019392505050565b600033610af1858285611a88565b610afc858585611b02565b506001949350505050565b600033610ad9818585610b1a8383611886565b610b249190612183565b611963565b6000610b3460025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a3610b798282611cd0565b5050565b600080610b88610c3c565b90506000610b96844761219b565b90506000610ba58560636120c1565b90506000610bb48360646120c1565b9050600083118015610bc65750600084115b610be25760405162461bcd60e51b8152600401610493906121b2565b6000610bee8288612183565b610bf886856120c1565b610c0291906120e0565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190612092565b92915050565b6000610ccc610c3c565b9050476000610cdc8660636120c1565b90506000610ceb8460646120c1565b9050600084118015610cfd5750600083115b610d195760405162461bcd60e51b8152600401610493906121b2565b6000610d258289612183565b610d2f85856120c1565b610d3991906120e0565b905086811015610d8b5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610493565b60065460405163095ea7b360e01b81526001600160a01b038881166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b158015610dd957600080fd5b505af1158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190612102565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e4690899030908690600401612124565b602060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190612102565b50600080876001600160a01b03168360405160006040518083038185875af1925050503d8060008114610ee7576040519150601f19603f3d011682016040523d82523d6000602084013e610eec565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a4604080516001600160a01b038a168152602081018590528691869189917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a450505050505050505050565b606060048054610a4890612148565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a3610b798282611daf565b600033816110048286611886565b9050838110156110645760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610493565b610afc8286868403611963565b600033610ad9818585611b02565b6000611089610c3c565b90506000611097344761219b565b905060006110a63460636120c1565b905060006110b58360646120c1565b90506000831180156110c75750600084115b6110e35760405162461bcd60e51b8152600401610493906121b2565b60006110ef8234612183565b6110f986856120c1565b61110391906120e0565b9050868110156111555760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610493565b60065460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b1580156111a157600080fd5b505af11580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d99190612102565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061120e9030908a908690600401612124565b602060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190612102565b506040516832ba3417ba37b5b2b760b91b815260090160405190819003812060065483835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a450505050505050565b60008060008060008060006112de610c3c565b905060006112ec344761219b565b9050816114f2576005546040516340c10f1960e01b81526001600160a01b038b81166004830152602482018d9052909116906340c10f1990604401600060405180830381600087803b15801561134157600080fd5b505af1158015611355573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061138d908c9030908f90600401612124565b602060405180830381600087803b1580156113a757600080fd5b505af11580156113bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113df9190612102565b5060055460408051633eaaf86b60e01b815290518b926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c9190612092565b600554604051636651f41960e11b81526001600160a01b038d8116600483015286924792911690819063cca3e832906024015b60206040518083038186803b1580156114a757600080fd5b505afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df9190612092565b9750975097509750975097505050610a2f565b806114fd83346120c1565b61150791906120e0565b8a101561157c5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e74206163636570746564000000006064820152608401610493565b6006546001600160a01b03166323b872dd8a308461159a87346120c1565b6115a491906120e0565b6040518463ffffffff1660e01b81526004016115c293929190612124565b602060405180830381600087803b1580156115dc57600080fd5b505af11580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116149190612102565b5060055460408051633eaaf86b60e01b815290516001600160a01b03909216916340c10f19918c91859134918691633eaaf86b916004808301926020929190829003018186803b15801561166757600080fd5b505afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f9190612092565b6116a991906120c1565b6116b391906120e0565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156116f957600080fd5b505af115801561170d573d6000803e3d6000fd5b5050505088600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176057600080fd5b505afa158015611774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117989190612092565b8234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118209190612092565b61182a91906120c1565b61183491906120e0565b600554604051636651f41960e11b81526001600160a01b038e8116600483015247921690819063cca3e8329060240161148f565b6001600160a01b038116600090815260208190526040812054610cbc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000806118bc610c3c565b90504760006118cc8560636120c1565b905060006118db8460646120c1565b90506000841180156118ed5750600083115b6119095760405162461bcd60e51b8152600401610493906121b2565b60006119158288612183565b61191f85856120c1565b61192991906120e0565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b0383166119c55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610493565b6001600160a01b038216611a265760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610493565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611a948484611886565b90506000198114611afc5781811015611aef5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610493565b611afc8484848403611963565b50505050565b6001600160a01b038316611b665760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610493565b6001600160a01b038216611bc85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610493565b6001600160a01b03831660009081526020819052604090205481811015611c405760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610493565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611c77908490612183565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cc391815260200190565b60405180910390a3611afc565b6001600160a01b038216611d265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610493565b8060026000828254611d389190612183565b90915550506001600160a01b03821660009081526020819052604081208054839290611d65908490612183565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216611e0f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610493565b6001600160a01b03821660009081526020819052604090205481811015611e835760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610493565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611eb290849061219b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611a7b565b80356001600160a01b0381168114611f0c57600080fd5b919050565b60008060408385031215611f2457600080fd5b82359150611f3460208401611ef5565b90509250929050565b600060208083528351808285015260005b81811015611f6a57858101830151858201604001528201611f4e565b81811115611f7c576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611fa557600080fd5b611fae83611ef5565b946020939093013593505050565b600080600060608486031215611fd157600080fd5b611fda84611ef5565b9250611fe860208501611ef5565b9150604084013590509250925092565b60006020828403121561200a57600080fd5b5035919050565b60008060006060848603121561202657600080fd5b833592506020840135915061203d60408501611ef5565b90509250925092565b60006020828403121561205857600080fd5b61206182611ef5565b9392505050565b6000806040838503121561207b57600080fd5b61208483611ef5565b9150611f3460208401611ef5565b6000602082840312156120a457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156120db576120db6120ab565b500290565b6000826120fd57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561211457600080fd5b8151801515811461206157600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c9082168061215c57607f821691505b6020821081141561217d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115612196576121966120ab565b500190565b6000828210156121ad576121ad6120ab565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e7400000000000000000060408201526060019056fea2646970667358221220f5b993d7a92991c1bdddd5da65cf5ce711d7be8b7639460dbb5ac2ea2040c99264736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bf5806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101fc578063a9059cbb1461020f578063cca3e832146101aa578063dd62ed3e1461022257600080fd5b806370a08231146101aa57806394d0851d146101d357806395d89b41146101e15780639dc29fac146101e957600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780633eaaf86b1461018d57806340c10f191461019557600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610235565b60405161011a9190610a13565b60405180910390f35b610136610131366004610a84565b6102c7565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610aae565b6102df565b6040516012815260200161011a565b610136610188366004610a84565b610303565b61014a610325565b6101a86101a3366004610a84565b610335565b005b61014a6101b8366004610aea565b6001600160a01b031660009081526020819052604090205490565b60405130815260200161011a565b61010d610379565b6101a86101f7366004610a84565b610388565b61013661020a366004610a84565b6103c8565b61013661021d366004610a84565b610448565b61014a610230366004610b0c565b610456565b60606003805461024490610b3f565b80601f016020809104026020016040519081016040528092919081815260200182805461027090610b3f565b80156102bd5780601f10610292576101008083540402835291602001916102bd565b820191906000526020600020905b8154815290600101906020018083116102a057829003601f168201915b5050505050905090565b6000336102d5818585610481565b5060019392505050565b6000336102ed8582856105a6565b6102f8858585610620565b506001949350505050565b6000336102d58185856103168383610456565b6103209190610b90565b610481565b600061033060025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361037582826107ee565b5050565b60606004805461024490610b3f565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361037582826108cd565b600033816103d68286610456565b90508381101561043b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102f88286868403610481565b6000336102d5818585610620565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610432565b6001600160a01b0382166105445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610432565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105b28484610456565b9050600019811461061a578181101561060d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610432565b61061a8484848403610481565b50505050565b6001600160a01b0383166106845760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610432565b6001600160a01b0382166106e65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610432565b6001600160a01b0383166000908152602081905260409020548181101561075e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610432565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610795908490610b90565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107e191815260200190565b60405180910390a361061a565b6001600160a01b0382166108445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610432565b80600260008282546108569190610b90565b90915550506001600160a01b03821660009081526020819052604081208054839290610883908490610b90565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03821661092d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610432565b6001600160a01b038216600090815260208190526040902054818110156109a15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610432565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109d0908490610ba8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610599565b600060208083528351808285015260005b81811015610a4057858101830151858201604001528201610a24565b81811115610a52576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a7f57600080fd5b919050565b60008060408385031215610a9757600080fd5b610aa083610a68565b946020939093013593505050565b600080600060608486031215610ac357600080fd5b610acc84610a68565b9250610ada60208501610a68565b9150604084013590509250925092565b600060208284031215610afc57600080fd5b610b0582610a68565b9392505050565b60008060408385031215610b1f57600080fd5b610b2883610a68565b9150610b3660208401610a68565b90509250929050565b600181811c90821680610b5357607f821691505b60208210811415610b7457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ba357610ba3610b7a565b500190565b600082821015610bba57610bba610b7a565b50039056fea2646970667358221220c1cad5f121f7371680e535ac51af499ee9735c4dcda66ea809a69819c1245be564736f6c63430008080033a2646970667358221220b909bb8a8e90de893ede473e62c92bdddc3ad49b980fde41065a19a32aba41d064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a65760003560e01c80631697b54d116100645780631697b54d146101b357806316f0115b146101c657806361bc221a146101e65780639049f9d2146101fc5780639e8af2af1461020f578063ecc861d01461022257600080fd5b8062a5ae21146100ab57806304c55b92146100fe5780630b6af776146101345780631269e22f1461014957806315f08f2c1461015c57806316095f6c14610192575b600080fd5b3480156100b757600080fd5b506100e16100c6366004610822565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e1610119366004610822565b6001602052600090815260409020546001600160a01b031681565b61014761014236600461083b565b610242565b005b61014761015736600461083b565b61036b565b34801561016857600080fd5b506100e1610177366004610822565b6002602052600090815260409020546001600160a01b031681565b6101a56101a036600461083b565b6103f1565b6040519081526020016100f5565b6101476101c136600461085d565b610494565b3480156101d257600080fd5b506000546100e1906001600160a01b031681565b3480156101f257600080fd5b506101a560035481565b61014761020a3660046108a1565b610522565b61014761021d36600461083b565b61061a565b34801561022e57600080fd5b506101a561023d36600461083b565b61077a565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516305fe138b60e01b81526004810184905233602482015282918291829182918291906305fe138b9060440160c060405180830381600087803b1580156102b557600080fd5b505af11580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed91906108c5565b9550955095509550955095508385876001600160a01b03167f91f41706171150ad632c6f151afafdca5d7f2680e2e10b6cd658bcde18e8beff86868c8760405161035994939291909384526001600160a01b039290921660208401526040830152606082015260800190565b60405180910390a45050505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551636208d8e560e11b81526004810183905233602482015263c411b1ca9034906044016000604051808303818588803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b50505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905263582cf7819034906024016020604051808303818588803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061048d9190610925565b5092915050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551635e16d9df60e01b81526004810184905260248101839052336044820152635e16d9df9034906064016000604051808303818588803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b5050505050505050565b8060405161052f90610814565b6001600160a01b039091168152602001604051809103906000f08015801561055b573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917ff86e3d2fc794443a042a24aab307e2450c5ea5ddde4894a5db19df1339e0e23b9190a4600080546040516001600160a01b03909116917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a2600160036000828254610612919061093e565b909155505050565b348110156106615760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516364afce8760e11b815260048101849052336024820152829182918291829182919063c95f9d0e90349060440160c0604051808303818588803b1580156106d557600080fd5b505af11580156106e9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061070e91906108c5565b9550955095509550955095508385876001600160a01b03167f6fedf9115d4715efc6ef1b1b404a33d364c206a7411db093413e6ed6f59b519286868c8760405161035994939291909384526001600160a01b039290921660208401526040830152606082015260800190565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905263de703e1090602401602060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d9190610925565b6131cc806200096583390190565b60006020828403121561083457600080fd5b5035919050565b6000806040838503121561084e57600080fd5b50508035926020909101359150565b60008060006060848603121561087257600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461089e57600080fd5b50565b6000602082840312156108b357600080fd5b81356108be81610889565b9392505050565b60008060008060008060c087890312156108de57600080fd5b86516108e981610889565b80965050602087015194506040870151935060608701519250608087015161091081610889565b8092505060a087015190509295509295509295565b60006020828403121561093757600080fd5b5051919050565b6000821982111561095f57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b50604051620031cc380380620031cc8339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d62806200246a83390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b61221f806200024b6000396000f3fe60806040526004361061015b5760003560e01c80635fcbd285116100c8578063a9059cbb11610084578063cca3e83211610061578063cca3e83214610407578063dd62ed3e14610427578063de703e1014610447578063f835cd3c1461046757005b8063a9059cbb146103c1578063c411b1ca146103e1578063c95f9d0e146103f457005b80635fcbd285146102eb57806370a082311461032357806394d0851d1461035957806395d89b411461036c5780639dc29fac14610381578063a457c2d7146103a157005b8063395093511161011757806339509351146102685780633eaaf86b1461028857806340c10f191461029d578063582cf781146102bd57806359bf5d39146102d05780635e16d9df146102d857005b806305fe138b1461016457806306fdde03146101bb578063095ea7b3146101dd57806318160ddd1461020d57806323b872dd1461022c578063313ce5671461024c57005b3661016257005b005b610177610172366004611f11565b610487565b604080516001600160a01b03978816815260208101969096528501939093526060840191909152909216608082015260a081019190915260c0015b60405180910390f35b3480156101c757600080fd5b506101d0610a39565b6040516101b29190611f3d565b3480156101e957600080fd5b506101fd6101f8366004611f92565b610acb565b60405190151581526020016101b2565b34801561021957600080fd5b506002545b6040519081526020016101b2565b34801561023857600080fd5b506101fd610247366004611fbc565b610ae3565b34801561025857600080fd5b50604051601281526020016101b2565b34801561027457600080fd5b506101fd610283366004611f92565b610b07565b34801561029457600080fd5b5061021e610b29565b3480156102a957600080fd5b506101626102b8366004611f92565b610b39565b61021e6102cb366004611ff8565b610b7d565b61021e610c3c565b6101626102e6366004612011565b610cc2565b3480156102f757600080fd5b5060055461030b906001600160a01b031681565b6040516001600160a01b0390911681526020016101b2565b34801561032f57600080fd5b5061021e61033e366004612046565b6001600160a01b031660009081526020819052604090205490565b34801561036557600080fd5b503061030b565b34801561037857600080fd5b506101d0610fa7565b34801561038d57600080fd5b5061016261039c366004611f92565b610fb6565b3480156103ad57600080fd5b506101fd6103bc366004611f92565b610ff6565b3480156103cd57600080fd5b506101fd6103dc366004611f92565b611071565b6101626103ef366004611f11565b61107f565b610177610402366004611f11565b6112cb565b34801561041357600080fd5b5061021e610422366004612046565b611868565b34801561043357600080fd5b5061021e610442366004612068565b611886565b34801561045357600080fd5b5061021e610462366004611ff8565b6118b1565b34801561047357600080fd5b5060065461030b906001600160a01b031681565b6000808080808061049c565b60405180910390fd5b600554604051632770a7eb60e21b81526001600160a01b038981166004830152602482018b905290911690639dc29fac90604401600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b505060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416955063095ea7b39450309390921691633eaaf86b91600480820192602092909190829003018186803b15801561055657600080fd5b505afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190612092565b6006546040516370a0823160e01b81523060048201528d916001600160a01b0316906370a082319060240160206040518083038186803b1580156105d157600080fd5b505afa1580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190612092565b61061391906120c1565b61061d91906120e0565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561066357600080fd5b505af1158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190612102565b5060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416936323b872dd9330938d939190921691633eaaf86b916004808301926020929190829003018186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190612092565b6006546040516370a0823160e01b81523060048201528e916001600160a01b0316906370a082319060240160206040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190612092565b6107af91906120c1565b6107b991906120e0565b6040518463ffffffff1660e01b81526004016107d793929190612124565b602060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190612102565b50600080886001600160a01b0316600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612092565b6108c78c476120c1565b6108d191906120e0565b604051600081818185875af1925050503d806000811461090d576040519150601f19603f3d011682016040523d82523d6000602084013e610912565b606091505b509150915088600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190612092565b600554604051636651f41960e11b81526001600160a01b038d811660048301528e924792911690819063cca3e8329060240160206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190612092565b97509750975097509750975050505b9295509295509295565b606060038054610a4890612148565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7490612148565b8015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b5050505050905090565b600033610ad9818585611963565b5060019392505050565b600033610af1858285611a88565b610afc858585611b02565b506001949350505050565b600033610ad9818585610b1a8383611886565b610b249190612183565b611963565b6000610b3460025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a3610b798282611cd0565b5050565b600080610b88610c3c565b90506000610b96844761219b565b90506000610ba58560636120c1565b90506000610bb48360646120c1565b9050600083118015610bc65750600084115b610be25760405162461bcd60e51b8152600401610493906121b2565b6000610bee8288612183565b610bf886856120c1565b610c0291906120e0565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190612092565b92915050565b6000610ccc610c3c565b9050476000610cdc8660636120c1565b90506000610ceb8460646120c1565b9050600084118015610cfd5750600083115b610d195760405162461bcd60e51b8152600401610493906121b2565b6000610d258289612183565b610d2f85856120c1565b610d3991906120e0565b905086811015610d8b5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610493565b60065460405163095ea7b360e01b81526001600160a01b038881166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b158015610dd957600080fd5b505af1158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190612102565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e4690899030908690600401612124565b602060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190612102565b50600080876001600160a01b03168360405160006040518083038185875af1925050503d8060008114610ee7576040519150601f19603f3d011682016040523d82523d6000602084013e610eec565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a4604080516001600160a01b038a168152602081018590528691869189917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a450505050505050505050565b606060048054610a4890612148565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a3610b798282611daf565b600033816110048286611886565b9050838110156110645760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610493565b610afc8286868403611963565b600033610ad9818585611b02565b6000611089610c3c565b90506000611097344761219b565b905060006110a63460636120c1565b905060006110b58360646120c1565b90506000831180156110c75750600084115b6110e35760405162461bcd60e51b8152600401610493906121b2565b60006110ef8234612183565b6110f986856120c1565b61110391906120e0565b9050868110156111555760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610493565b60065460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b1580156111a157600080fd5b505af11580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d99190612102565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061120e9030908a908690600401612124565b602060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190612102565b506040516832ba3417ba37b5b2b760b91b815260090160405190819003812060065483835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a450505050505050565b60008060008060008060006112de610c3c565b905060006112ec344761219b565b9050816114f2576005546040516340c10f1960e01b81526001600160a01b038b81166004830152602482018d9052909116906340c10f1990604401600060405180830381600087803b15801561134157600080fd5b505af1158015611355573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061138d908c9030908f90600401612124565b602060405180830381600087803b1580156113a757600080fd5b505af11580156113bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113df9190612102565b5060055460408051633eaaf86b60e01b815290518b926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c9190612092565b600554604051636651f41960e11b81526001600160a01b038d8116600483015286924792911690819063cca3e832906024015b60206040518083038186803b1580156114a757600080fd5b505afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df9190612092565b9750975097509750975097505050610a2f565b806114fd83346120c1565b61150791906120e0565b8a101561157c5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e74206163636570746564000000006064820152608401610493565b6006546001600160a01b03166323b872dd8a308461159a87346120c1565b6115a491906120e0565b6040518463ffffffff1660e01b81526004016115c293929190612124565b602060405180830381600087803b1580156115dc57600080fd5b505af11580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116149190612102565b5060055460408051633eaaf86b60e01b815290516001600160a01b03909216916340c10f19918c91859134918691633eaaf86b916004808301926020929190829003018186803b15801561166757600080fd5b505afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f9190612092565b6116a991906120c1565b6116b391906120e0565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156116f957600080fd5b505af115801561170d573d6000803e3d6000fd5b5050505088600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176057600080fd5b505afa158015611774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117989190612092565b8234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118209190612092565b61182a91906120c1565b61183491906120e0565b600554604051636651f41960e11b81526001600160a01b038e8116600483015247921690819063cca3e8329060240161148f565b6001600160a01b038116600090815260208190526040812054610cbc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000806118bc610c3c565b90504760006118cc8560636120c1565b905060006118db8460646120c1565b90506000841180156118ed5750600083115b6119095760405162461bcd60e51b8152600401610493906121b2565b60006119158288612183565b61191f85856120c1565b61192991906120e0565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b0383166119c55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610493565b6001600160a01b038216611a265760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610493565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611a948484611886565b90506000198114611afc5781811015611aef5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610493565b611afc8484848403611963565b50505050565b6001600160a01b038316611b665760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610493565b6001600160a01b038216611bc85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610493565b6001600160a01b03831660009081526020819052604090205481811015611c405760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610493565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611c77908490612183565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cc391815260200190565b60405180910390a3611afc565b6001600160a01b038216611d265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610493565b8060026000828254611d389190612183565b90915550506001600160a01b03821660009081526020819052604081208054839290611d65908490612183565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216611e0f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610493565b6001600160a01b03821660009081526020819052604090205481811015611e835760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610493565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611eb290849061219b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611a7b565b80356001600160a01b0381168114611f0c57600080fd5b919050565b60008060408385031215611f2457600080fd5b82359150611f3460208401611ef5565b90509250929050565b600060208083528351808285015260005b81811015611f6a57858101830151858201604001528201611f4e565b81811115611f7c576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611fa557600080fd5b611fae83611ef5565b946020939093013593505050565b600080600060608486031215611fd157600080fd5b611fda84611ef5565b9250611fe860208501611ef5565b9150604084013590509250925092565b60006020828403121561200a57600080fd5b5035919050565b60008060006060848603121561202657600080fd5b833592506020840135915061203d60408501611ef5565b90509250925092565b60006020828403121561205857600080fd5b61206182611ef5565b9392505050565b6000806040838503121561207b57600080fd5b61208483611ef5565b9150611f3460208401611ef5565b6000602082840312156120a457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156120db576120db6120ab565b500290565b6000826120fd57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561211457600080fd5b8151801515811461206157600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c9082168061215c57607f821691505b6020821081141561217d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115612196576121966120ab565b500190565b6000828210156121ad576121ad6120ab565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e7400000000000000000060408201526060019056fea2646970667358221220f5b993d7a92991c1bdddd5da65cf5ce711d7be8b7639460dbb5ac2ea2040c99264736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bf5806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101fc578063a9059cbb1461020f578063cca3e832146101aa578063dd62ed3e1461022257600080fd5b806370a08231146101aa57806394d0851d146101d357806395d89b41146101e15780639dc29fac146101e957600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780633eaaf86b1461018d57806340c10f191461019557600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610235565b60405161011a9190610a13565b60405180910390f35b610136610131366004610a84565b6102c7565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610aae565b6102df565b6040516012815260200161011a565b610136610188366004610a84565b610303565b61014a610325565b6101a86101a3366004610a84565b610335565b005b61014a6101b8366004610aea565b6001600160a01b031660009081526020819052604090205490565b60405130815260200161011a565b61010d610379565b6101a86101f7366004610a84565b610388565b61013661020a366004610a84565b6103c8565b61013661021d366004610a84565b610448565b61014a610230366004610b0c565b610456565b60606003805461024490610b3f565b80601f016020809104026020016040519081016040528092919081815260200182805461027090610b3f565b80156102bd5780601f10610292576101008083540402835291602001916102bd565b820191906000526020600020905b8154815290600101906020018083116102a057829003601f168201915b5050505050905090565b6000336102d5818585610481565b5060019392505050565b6000336102ed8582856105a6565b6102f8858585610620565b506001949350505050565b6000336102d58185856103168383610456565b6103209190610b90565b610481565b600061033060025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361037582826107ee565b5050565b60606004805461024490610b3f565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361037582826108cd565b600033816103d68286610456565b90508381101561043b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102f88286868403610481565b6000336102d5818585610620565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610432565b6001600160a01b0382166105445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610432565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105b28484610456565b9050600019811461061a578181101561060d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610432565b61061a8484848403610481565b50505050565b6001600160a01b0383166106845760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610432565b6001600160a01b0382166106e65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610432565b6001600160a01b0383166000908152602081905260409020548181101561075e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610432565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610795908490610b90565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107e191815260200190565b60405180910390a361061a565b6001600160a01b0382166108445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610432565b80600260008282546108569190610b90565b90915550506001600160a01b03821660009081526020819052604081208054839290610883908490610b90565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03821661092d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610432565b6001600160a01b038216600090815260208190526040902054818110156109a15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610432565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109d0908490610ba8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610599565b600060208083528351808285015260005b81811015610a4057858101830151858201604001528201610a24565b81811115610a52576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a7f57600080fd5b919050565b60008060408385031215610a9757600080fd5b610aa083610a68565b946020939093013593505050565b600080600060608486031215610ac357600080fd5b610acc84610a68565b9250610ada60208501610a68565b9150604084013590509250925092565b600060208284031215610afc57600080fd5b610b0582610a68565b9392505050565b60008060408385031215610b1f57600080fd5b610b2883610a68565b9150610b3660208401610a68565b90509250929050565b600181811c90821680610b5357607f821691505b60208210811415610b7457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ba357610ba3610b7a565b500190565b600082821015610bba57610bba610b7a565b50039056fea2646970667358221220c1cad5f121f7371680e535ac51af499ee9735c4dcda66ea809a69819c1245be564736f6c63430008080033a2646970667358221220b909bb8a8e90de893ede473e62c92bdddc3ad49b980fde41065a19a32aba41d064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/Dex.sol:Dex",
        "label": "pool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Pool)1911"
      },
      {
        "astId": 772,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Pool)1911)"
      },
      {
        "astId": 776,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMappingAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 778,
        "contract": "contracts/Dex.sol:Dex",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Pool)1911": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_contract(Pool)1911)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Pool)",
        "numberOfBytes": "32",
        "value": "t_contract(Pool)1911"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}