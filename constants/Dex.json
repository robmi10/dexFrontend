{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_createBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "poolAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_useraddress",
          "type": "address"
        }
      ],
      "name": "userAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMapping",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMappingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmountEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_removeLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_swapEthToToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedAmount",
          "type": "uint256"
        }
      ],
      "name": "_swapTokenToEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1af4f4a2f28a59e6a43e0269a5ad46d85499325abf08a4d284ec9c40892a47a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2938364",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9c2276951f7f7cdc1e46495a159741ff44e3891cf4358797e596a993c0617389",
    "transactionHash": "0xe1af4f4a2f28a59e6a43e0269a5ad46d85499325abf08a4d284ec9c40892a47a",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "2938364",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1041eb8fbd77aad64104e45be8228438",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_createBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"poolAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"userAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMapping\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMappingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmountEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_removeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_swapEthToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedAmount\",\"type\":\"uint256\"}],\"name\":\"_swapTokenToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex.sol\":\"Dex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Dex {\\n    Pool public  pool;\\n    \\n    event userAddress (address indexed _useraddress);\\n    event poolAddress (address indexed _createBy, address indexed _token ,uint256 indexed _id);\\n\\n    mapping (uint256 => Pool) public PoolMapping;\\n    mapping (uint256 => address) public PoolMappingAddress;\\n    uint256 public counter;\\n\\n    constructor () payable{}\\n\\n     function getPoolAddress(uint256 _pool) public view returns(address){\\n        return address(PoolMapping[_pool]);\\n    }\\n\\n    function createPool(address tokenA) public payable {\\n        pool = new Pool(tokenA);\\n        PoolMapping[counter] = pool;\\n        emit poolAddress(msg.sender, address(pool), counter);\\n        counter += 1;\\n    }\\n    \\n    function _addLiquidity(uint256 _pool, uint256 _amount) public payable  {\\n        require(_amount >= msg.value, \\\"to little amount\\\");\\n        pool =  Pool(payable(address(PoolMapping[_pool])));\\n        emit userAddress(address(pool));\\n        pool.addLiquidity{ value: msg.value }(_amount, msg.sender);\\n    }\\n\\n    function _removeLiquidity(uint256 _pool, uint256 _amount) public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool]))); \\n        pool.removeLiquidity(_amount, msg.sender);\\n    }\\n\\n    function _swapTokenToEth(uint256 _pool, uint256 _amount, uint256 _estimatedAmount)  public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.swapTokenToEth{ value: msg.value }(_amount, _estimatedAmount, msg.sender);\\n    }\\n\\n    function _swapEthToToken(uint256 _pool, uint256 _amount)  public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.swapEthToToken{ value: msg.value }(_amount, msg.sender);\\n    }\\n    \\n    function _getSwapAmount(uint256 _pool, uint256 _amount)  public returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.getSwapAmountDai(_amount);\\n    }\\n    function _getSwapAmountEth(uint256 _pool, uint256 _amount)  public payable returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.getSwapAmountEth{value: msg.value }(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0e868271e8c031ea409cec35a45324b9143d41521463d064889dc594e43fd487\",\"license\":\"MIT\"},\"contracts/LIToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract LIToken is ERC20{\\n    event minted(address indexed _user, uint256 indexed _amount);\\n    event burned(address indexed _user, uint256 indexed _amount);\\n\\n    constructor() ERC20('Lp', 'LPToken'){\\n    }\\n\\n    function mint(address _sender, uint256 _amount) external {\\n        emit minted(_sender, _amount);\\n        _mint(_sender, _amount);\\n    }\\n\\n    function burn(address _sender, uint256 _amount) external {\\n         emit burned(_sender, _amount);\\n        _burn(_sender, _amount);\\n    }\\n\\n    function _totalSupply() public view returns(uint256){\\n         return totalSupply();\\n    }\\n}\",\"keccak256\":\"0xd783167bff62a10961db566ca100c16789cadd78b91f92c7e2f8bc84f1b562cf\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./LIToken.sol\\\";\\n\\n//Skapa den h\\u00e4r kontrakten som en pool ist\\u00e4llet och den h\\u00e4r poolen har allts\\u00e5 sin egna address.\\n//Poolen ska d\\u00e4refter kunna kallas fr\\u00e5n en annan Kontrakt som ska vara sj\\u00e4lva Dex och ta hand om varje pool som exisiterar.\\n//D\\u00e4rf\\u00f6r g\\u00f6r om denna kontrakt s\\u00e5 att den \\u00e4r kopplad till eth msg.value() ist\\u00e4llet f\\u00f6r \\\"weth\\\" sen skapa den riktiga Dex \\\"manage\\\" kontrakten.\\n//I Dex kontraktet spara alla olika pools i en mapping och kalla deras funktioner med hj\\u00e4lp av en \\n\\ncontract Pool is IERC20, LIToken {\\n    LIToken public lpToken;\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    address public erc20TokenAddress;\\n    mapping(address => uint256) WethMapping;\\n    event tokenSwap(address indexed token, address indexed swapper, string indexed swap, uint256 _amount);\\n    //event liquidityPool( uint256 indexed amount, address indexed provider, uint256 indexed reserve);\\n    //event liquidityWidthdraw( uint256 indexed _amount, address indexed _to);\\n    //event addressBalance(address indexed token, uint256 indexed _amount, address indexed _address);\\n    event balancesCheck(uint256 indexed totalSupply, uint256 indexed ethBalance, uint256 indexed ethBackToUser, uint256 liquidityBackToUser);\\n    event balanceCall(uint256 indexed _amount, uint256 indexed _secondamount);\\n  //  event userInPoolAddress(address indexed _caller);\\n    //event transferSwap(uint256 _amount, bytes data, bool call);\\n\\n    constructor(address _erc20TokenAddress) {\\n        require(_erc20TokenAddress != address(0));\\n        erc20TokenAddress = _erc20TokenAddress;\\n        lpToken = new LIToken();\\n    }\\n\\n    function getReserve() public payable returns(uint256) {\\n        uint256 balaceGet = IERC20(erc20TokenAddress).balanceOf(address(this));\\n       // emit balanceCall(balaceGet);\\n        return balaceGet;\\n    }\\n    /*function getEthReserve() public payable returns(uint256) {\\n        uint256 balaceGet = address(this).balance;\\n        emit balanceCall(balaceGet);\\n        return address(this).balance;\\n    }\\n    function getAddress() public payable returns (address){\\n        return erc20TokenAddress;\\n    }\\n    function getLiquidityAddress() public payable returns (address){\\n        return address(lpToken);\\n    }*/\\n\\n    function addLiquidity (uint _amount, address _sender) public payable{\\n        uint256 daiReserve = getReserve();\\n        \\n        if(daiReserve == 0){\\n            lpToken.mint(_sender, _amount);\\n            IERC20(erc20TokenAddress).transferFrom(_sender, address(this), _amount);\\n           // emit liquidityPool( _amount, _sender, 1);\\n        }else{\\n        uint256 _ethReserve = address(this).balance - msg.value;\\n        uint256 acceptedLiquidityAmount = (msg.value * daiReserve) / (_ethReserve);\\n        require(_amount >= acceptedLiquidityAmount, \\\"not accepted liquidity less then the minimum amount accepted\\\");\\n        /*IERC20(erc20TokenAddress).approve(address(this), acceptedLiquidityAmount);*/\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), acceptedLiquidityAmount);\\n        uint256 mintokens = (lpToken._totalSupply() * msg.value) / (_ethReserve);\\n        lpToken.mint(_sender, _amount);\\n       // emit liquidityPool( mintokens, _sender, 2);\\n        emit balancesCheck(mintokens, acceptedLiquidityAmount, _ethReserve, msg.value);\\n        // emit liquidityPool(10, _sender, 2);\\n        }\\n    }\\n    // remove liquidity\\n    function removeLiquidity(uint _amount, address _sender) public {\\n        require(_amount >= 0, \\\"to little amount\\\");  \\n        uint256 ethReserve = address(this).balance;\\n        uint256 totalSupply = lpToken._totalSupply();\\n        uint256 erc20TokenReserve = IERC20(erc20TokenAddress).balanceOf(address(this));\\n        uint256 ethBackToUser = (ethReserve * _amount) / totalSupply;\\n        uint256 ldtokenBackToUser = (erc20TokenReserve * _amount) / totalSupply;\\n        lpToken.burn(_sender, _amount);\\n        IERC20(erc20TokenAddress).approve(address(this), ldtokenBackToUser);\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, ldtokenBackToUser);\\n        (bool call, bytes memory data) = _sender.call{value: ethBackToUser}(\\\"\\\");\\n       \\n       // emit liquidityPool(_amount, _sender, ldtokenBackToUser);\\n        emit balancesCheck (totalSupply, ethReserve ,ethBackToUser, ldtokenBackToUser);\\n    }\\n   \\n\\n     function getSwapAmountEth(uint256 _amount) public payable returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - _amount;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (_amount + fullEthReserve);\\n       // emit balancesCheck (ethReserve, _amount ,inputAmountFee, outputAmount);\\n        emit balanceCall(_amount, outputAmount);\\n        return outputAmount;\\n    }\\n\\n    function getSwapAmountDai(uint256 _amount) public returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\\n        //emit balancesCheck (ethReserve, erc20Reserve ,inputAmountFee, outputAmount);\\n        emit balanceCall(outputAmount, fullErc20Reserve);\\n        return outputAmount;\\n    }\\n\\n    function swapEthToToken(uint256 _amount, address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 inputAmountFee = msg.value * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (msg.value + fullEthReserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        require(outputAmount >= _amount, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(address(this), outputAmount);\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, outputAmount);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"eth/token\\\", outputAmount);\\n    }\\n\\n    function swapTokenToEth(uint256 _amount, uint256 _ethBackToUser ,address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        require(outputAmount >= _ethBackToUser, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(_sender, outputAmount);\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), outputAmount);\\n        (bool call, bytes memory data) = _sender.call{value: outputAmount}(\\\"\\\");\\n        //emit transferSwap(outputAmount, data, call);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"token/eth\\\", outputAmount);\\n        emit balancesCheck (ethReserve, fullErc20Reserve ,inputAmountFee, outputAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xd4acc513e30dd7f6ff79a0738c41346d386b20a08667e258d09c600a82ea6e8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052613439806100136000396000f3fe6080604052600436106100a65760003560e01c80631697b54d116100645780631697b54d146101b357806316f0115b146101c657806361bc221a146101e65780639049f9d2146101fc5780639e8af2af1461020f578063ecc861d01461022257600080fd5b8062a5ae21146100ab57806304c55b92146100fe5780630b6af776146101345780631269e22f1461014957806315f08f2c1461015c57806316095f6c14610192575b600080fd5b3480156100b757600080fd5b506100e16100c63660046106ba565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e16101193660046106ba565b6001602052600090815260409020546001600160a01b031681565b6101476101423660046106d3565b610242565b005b6101476101573660046106d3565b6102c6565b34801561016857600080fd5b506100e16101773660046106ba565b6002602052600090815260409020546001600160a01b031681565b6101a56101a03660046106d3565b61034d565b6040519081526020016100f5565b6101476101c13660046106f5565b6103f0565b3480156101d257600080fd5b506000546100e1906001600160a01b031681565b3480156101f257600080fd5b506101a560035481565b61014761020a366004610721565b61047e565b61014761021d3660046106d3565b610540565b34801561022e57600080fd5b506101a561023d3660046106d3565b610613565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117909255516305fe138b60e01b8152600481018390523360248201526305fe138b90604401600060405180830381600087803b1580156102aa57600080fd5b505af11580156102be573d6000803e3d6000fd5b505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551636208d8e560e11b81526004810183905233602482015263c411b1ca9034906044015b6000604051808303818588803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b50505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905263582cf7819034906024016020604051808303818588803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103e99190610751565b5092915050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551635e16d9df60e01b81526004810184905260248101839052336044820152635e16d9df9034906064016000604051808303818588803b15801561046057600080fd5b505af1158015610474573d6000803e3d6000fd5b5050505050505050565b8060405161048b906106ad565b6001600160a01b039091168152602001604051809103906000f0801580156104b7573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917fc4c6a0ee90ff4ca524cb816f107ed086b6dfb08bb6dc5cefea1a34254040be469190a4600160036000828254610538919061076a565b909155505050565b348110156105875760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905190917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a26000546040516364afce8760e11b8152600481018390523360248201526001600160a01b039091169063c95f9d0e903490604401610317565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905263de703e1090602401602060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610751565b612c738061079183390190565b6000602082840312156106cc57600080fd5b5035919050565b600080604083850312156106e657600080fd5b50508035926020909101359150565b60008060006060848603121561070a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561073357600080fd5b81356001600160a01b038116811461074a57600080fd5b9392505050565b60006020828403121561076357600080fd5b5051919050565b6000821982111561078b57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b5060405162002c7338038062002c738339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d3e8062001f3583390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b611cea806200024b6000396000f3fe6080604052600436106101385760003560e01c80635e16d9df116100b0578063a9059cbb1161006c578063a9059cbb1461035d578063c411b1ca1461037d578063c95f9d0e14610390578063dd62ed3e146103a3578063de703e10146103c3578063f835cd3c146103e357005b80635e16d9df146102875780635fcbd2851461029a57806370a08231146102d257806395d89b41146103085780639dc29fac1461031d578063a457c2d71461033d57005b8063313ce567116100ff578063313ce567146101fb57806339509351146102175780633eaaf86b1461023757806340c10f191461024c578063582cf7811461026c57806359bf5d391461027f57005b806305fe138b1461014157806306fdde0314610161578063095ea7b31461018c57806318160ddd146101bc57806323b872dd146101db57005b3661013f57005b005b34801561014d57600080fd5b5061013f61015c3660046119dc565b610403565b34801561016d57600080fd5b50610176610759565b6040516101839190611a08565b60405180910390f35b34801561019857600080fd5b506101ac6101a7366004611a5d565b6107eb565b6040519015158152602001610183565b3480156101c857600080fd5b506002545b604051908152602001610183565b3480156101e757600080fd5b506101ac6101f6366004611a87565b610803565b34801561020757600080fd5b5060405160128152602001610183565b34801561022357600080fd5b506101ac610232366004611a5d565b610827565b34801561024357600080fd5b506101cd610849565b34801561025857600080fd5b5061013f610267366004611a5d565b610859565b6101cd61027a366004611ac3565b61089d565b6101cd61095c565b61013f610295366004611adc565b6109e2565b3480156102a657600080fd5b506005546102ba906001600160a01b031681565b6040516001600160a01b039091168152602001610183565b3480156102de57600080fd5b506101cd6102ed366004611b11565b6001600160a01b031660009081526020819052604090205490565b34801561031457600080fd5b50610176610cbb565b34801561032957600080fd5b5061013f610338366004611a5d565b610cca565b34801561034957600080fd5b506101ac610358366004611a5d565b610d0a565b34801561036957600080fd5b506101ac610378366004611a5d565b610d85565b61013f61038b3660046119dc565b610d93565b61013f61039e3660046119dc565b610fdf565b3480156103af57600080fd5b506101cd6103be366004611b33565b611350565b3480156103cf57600080fd5b506101cd6103de366004611ac3565b61137b565b3480156103ef57600080fd5b506006546102ba906001600160a01b031681565b610411565b60405180910390fd5b60055460408051633eaaf86b60e01b8152905147926000926001600160a01b0390911691633eaaf86b91600480820192602092909190829003018186803b15801561045b57600080fd5b505afa15801561046f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104939190611b5d565b6006546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190611b5d565b90506000826105238786611b8c565b61052d9190611bab565b905060008361053c8885611b8c565b6105469190611bab565b600554604051632770a7eb60e21b81526001600160a01b038981166004830152602482018b9052929350911690639dc29fac90604401600060405180830381600087803b15801561059657600080fd5b505af11580156105aa573d6000803e3d6000fd5b505060065460405163095ea7b360e01b8152306004820152602481018590526001600160a01b03909116925063095ea7b39150604401602060405180830381600087803b1580156105fa57600080fd5b505af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190611bcd565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106679030908a908690600401611bef565b602060405180830381600087803b15801561068157600080fd5b505af1158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b99190611bcd565b50600080876001600160a01b03168460405160006040518083038185875af1925050503d8060008114610708576040519150601f19603f3d011682016040523d82523d6000602084013e61070d565b606091505b50915091508387877f971a182078c546404caf9255c1220729cb525f1a9717b2a5b9cc8859971abbb88660405161074691815260200190565b60405180910390a4505050505050505050565b60606003805461076890611c13565b80601f016020809104026020016040519081016040528092919081815260200182805461079490611c13565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b5050505050905090565b6000336107f981858561142d565b5060019392505050565b600033610811858285611551565b61081c8585856115c5565b506001949350505050565b6000336107f981858561083a8383611350565b6108449190611c4e565b61142d565b600061085460025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a36108998282611793565b5050565b6000806108a861095c565b905060006108b68447611c66565b905060006108c5856063611b8c565b905060006108d4836064611b8c565b90506000831180156108e65750600084115b6109025760405162461bcd60e51b815260040161040890611c7d565b600061090e8288611c4e565b6109188685611b8c565b6109229190611bab565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190611b5d565b92915050565b60006109ec61095c565b90504760006109fc866063611b8c565b90506000610a0b846064611b8c565b9050600084118015610a1d5750600083115b610a395760405162461bcd60e51b815260040161040890611c7d565b6000610a458289611c4e565b610a4f8585611b8c565b610a599190611bab565b905086811015610aab5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610408565b60065460405163095ea7b360e01b81526001600160a01b038881166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b319190611bcd565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610b6690899030908690600401611bef565b602060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190611bcd565b50600080876001600160a01b03168360405160006040518083038185875af1925050503d8060008114610c07576040519150601f19603f3d011682016040523d82523d6000602084013e610c0c565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a48484877f971a182078c546404caf9255c1220729cb525f1a9717b2a5b9cc8859971abbb886604051610ca791815260200190565b60405180910390a450505050505050505050565b60606004805461076890611c13565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a36108998282611872565b60003381610d188286611350565b905083811015610d785760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610408565b61081c828686840361142d565b6000336107f98185856115c5565b6000610d9d61095c565b90506000610dab3447611c66565b90506000610dba346063611b8c565b90506000610dc9836064611b8c565b9050600083118015610ddb5750600084115b610df75760405162461bcd60e51b815260040161040890611c7d565b6000610e038234611c4e565b610e0d8685611b8c565b610e179190611bab565b905086811015610e695760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610408565b60065460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610eb557600080fd5b505af1158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190611bcd565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610f229030908a908690600401611bef565b602060405180830381600087803b158015610f3c57600080fd5b505af1158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190611bcd565b506040516832ba3417ba37b5b2b760b91b815260090160405190819003812060065483835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a450505050505050565b6000610fe961095c565b9050806110e2576005546040516340c10f1960e01b81526001600160a01b03848116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b15801561103e57600080fd5b505af1158015611052573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061108a90859030908890600401611bef565b602060405180830381600087803b1580156110a457600080fd5b505af11580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc9190611bcd565b50505050565b60006110ee3447611c66565b90506000816110fd8434611b8c565b6111079190611bab565b90508085101561117f5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e74206163636570746564000000006064820152608401610408565b6006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906111b390879030908690600401611bef565b602060405180830381600087803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112059190611bcd565b5060008234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561125857600080fd5b505afa15801561126c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112909190611b5d565b61129a9190611b8c565b6112a49190611bab565b6005546040516340c10f1960e01b81526001600160a01b038881166004830152602482018a90529293509116906340c10f1990604401600060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050508282827f971a182078c546404caf9255c1220729cb525f1a9717b2a5b9cc8859971abbb83460405161134091815260200190565b60405180910390a4505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60008061138661095c565b9050476000611396856063611b8c565b905060006113a5846064611b8c565b90506000841180156113b75750600083115b6113d35760405162461bcd60e51b815260040161040890611c7d565b60006113df8288611c4e565b6113e98585611b8c565b6113f39190611bab565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b03831661148f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610408565b6001600160a01b0382166114f05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610408565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061155d8484611350565b905060001981146110dc57818110156115b85760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610408565b6110dc848484840361142d565b6001600160a01b0383166116295760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610408565b6001600160a01b03821661168b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610408565b6001600160a01b038316600090815260208190526040902054818110156117035760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610408565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061173a908490611c4e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161178691815260200190565b60405180910390a36110dc565b6001600160a01b0382166117e95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610408565b80600260008282546117fb9190611c4e565b90915550506001600160a01b03821660009081526020819052604081208054839290611828908490611c4e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166118d25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610408565b6001600160a01b038216600090815260208190526040902054818110156119465760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610408565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611975908490611c66565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b80356001600160a01b03811681146119d757600080fd5b919050565b600080604083850312156119ef57600080fd5b823591506119ff602084016119c0565b90509250929050565b600060208083528351808285015260005b81811015611a3557858101830151858201604001528201611a19565b81811115611a47576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611a7057600080fd5b611a79836119c0565b946020939093013593505050565b600080600060608486031215611a9c57600080fd5b611aa5846119c0565b9250611ab3602085016119c0565b9150604084013590509250925092565b600060208284031215611ad557600080fd5b5035919050565b600080600060608486031215611af157600080fd5b8335925060208401359150611b08604085016119c0565b90509250925092565b600060208284031215611b2357600080fd5b611b2c826119c0565b9392505050565b60008060408385031215611b4657600080fd5b611b4f836119c0565b91506119ff602084016119c0565b600060208284031215611b6f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ba657611ba6611b76565b500290565b600082611bc857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611bdf57600080fd5b81518015158114611b2c57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c90821680611c2757607f821691505b60208210811415611c4857634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611c6157611c61611b76565b500190565b600082821015611c7857611c78611b76565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e7400000000000000000060408201526060019056fea2646970667358221220c7c383a0dea1d73259971579cd83fc372388745e68de7cb5590a5935fb44f92064736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bd1806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101c5578063a457c2d7146101d8578063a9059cbb146101eb578063dd62ed3e146101fe57600080fd5b806340c10f191461017f57806370a082311461019457806395d89b41146101bd57600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780633eaaf86b1461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610211565b60405161010491906109ef565b60405180910390f35b61012061011b366004610a60565b6102a3565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610a8a565b6102bb565b60405160128152602001610104565b610120610172366004610a60565b6102df565b610134610301565b61019261018d366004610a60565b610311565b005b6101346101a2366004610ac6565b6001600160a01b031660009081526020819052604090205490565b6100f7610355565b6101926101d3366004610a60565b610364565b6101206101e6366004610a60565b6103a4565b6101206101f9366004610a60565b610424565b61013461020c366004610ae8565b610432565b60606003805461022090610b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461024c90610b1b565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b5050505050905090565b6000336102b181858561045d565b5060019392505050565b6000336102c9858285610582565b6102d48585856105fc565b506001949350505050565b6000336102b18185856102f28383610432565b6102fc9190610b6c565b61045d565b600061030c60025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361035182826107ca565b5050565b60606004805461022090610b1b565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361035182826108a9565b600033816103b28286610432565b9050838110156104175760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102d4828686840361045d565b6000336102b18185856105fc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104bf5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161040e565b6001600160a01b0382166105205760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161040e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061058e8484610432565b905060001981146105f657818110156105e95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161040e565b6105f6848484840361045d565b50505050565b6001600160a01b0383166106605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161040e565b6001600160a01b0382166106c25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161040e565b6001600160a01b0383166000908152602081905260409020548181101561073a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161040e565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610771908490610b6c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107bd91815260200190565b60405180910390a36105f6565b6001600160a01b0382166108205760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161040e565b80600260008282546108329190610b6c565b90915550506001600160a01b0382166000908152602081905260408120805483929061085f908490610b6c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166109095760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161040e565b6001600160a01b0382166000908152602081905260409020548181101561097d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161040e565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109ac908490610b84565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610575565b600060208083528351808285015260005b81811015610a1c57858101830151858201604001528201610a00565b81811115610a2e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a5b57600080fd5b919050565b60008060408385031215610a7357600080fd5b610a7c83610a44565b946020939093013593505050565b600080600060608486031215610a9f57600080fd5b610aa884610a44565b9250610ab660208501610a44565b9150604084013590509250925092565b600060208284031215610ad857600080fd5b610ae182610a44565b9392505050565b60008060408385031215610afb57600080fd5b610b0483610a44565b9150610b1260208401610a44565b90509250929050565b600181811c90821680610b2f57607f821691505b60208210811415610b5057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b7f57610b7f610b56565b500190565b600082821015610b9657610b96610b56565b50039056fea2646970667358221220909e1b5ad7b3f4bbd47336dc69b3c6f390494bd61e4cb5bbc580bfba73fa8e8264736f6c63430008080033a2646970667358221220474c60ba562a768ec08c574d98acfa934aaedc7eef7fa5ba39969cf7e9d1f4f664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a65760003560e01c80631697b54d116100645780631697b54d146101b357806316f0115b146101c657806361bc221a146101e65780639049f9d2146101fc5780639e8af2af1461020f578063ecc861d01461022257600080fd5b8062a5ae21146100ab57806304c55b92146100fe5780630b6af776146101345780631269e22f1461014957806315f08f2c1461015c57806316095f6c14610192575b600080fd5b3480156100b757600080fd5b506100e16100c63660046106ba565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e16101193660046106ba565b6001602052600090815260409020546001600160a01b031681565b6101476101423660046106d3565b610242565b005b6101476101573660046106d3565b6102c6565b34801561016857600080fd5b506100e16101773660046106ba565b6002602052600090815260409020546001600160a01b031681565b6101a56101a03660046106d3565b61034d565b6040519081526020016100f5565b6101476101c13660046106f5565b6103f0565b3480156101d257600080fd5b506000546100e1906001600160a01b031681565b3480156101f257600080fd5b506101a560035481565b61014761020a366004610721565b61047e565b61014761021d3660046106d3565b610540565b34801561022e57600080fd5b506101a561023d3660046106d3565b610613565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117909255516305fe138b60e01b8152600481018390523360248201526305fe138b90604401600060405180830381600087803b1580156102aa57600080fd5b505af11580156102be573d6000803e3d6000fd5b505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551636208d8e560e11b81526004810183905233602482015263c411b1ca9034906044015b6000604051808303818588803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b50505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905263582cf7819034906024016020604051808303818588803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103e99190610751565b5092915050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551635e16d9df60e01b81526004810184905260248101839052336044820152635e16d9df9034906064016000604051808303818588803b15801561046057600080fd5b505af1158015610474573d6000803e3d6000fd5b5050505050505050565b8060405161048b906106ad565b6001600160a01b039091168152602001604051809103906000f0801580156104b7573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917fc4c6a0ee90ff4ca524cb816f107ed086b6dfb08bb6dc5cefea1a34254040be469190a4600160036000828254610538919061076a565b909155505050565b348110156105875760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905190917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a26000546040516364afce8760e11b8152600481018390523360248201526001600160a01b039091169063c95f9d0e903490604401610317565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905263de703e1090602401602060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610751565b612c738061079183390190565b6000602082840312156106cc57600080fd5b5035919050565b600080604083850312156106e657600080fd5b50508035926020909101359150565b60008060006060848603121561070a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561073357600080fd5b81356001600160a01b038116811461074a57600080fd5b9392505050565b60006020828403121561076357600080fd5b5051919050565b6000821982111561078b57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b5060405162002c7338038062002c738339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d3e8062001f3583390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b611cea806200024b6000396000f3fe6080604052600436106101385760003560e01c80635e16d9df116100b0578063a9059cbb1161006c578063a9059cbb1461035d578063c411b1ca1461037d578063c95f9d0e14610390578063dd62ed3e146103a3578063de703e10146103c3578063f835cd3c146103e357005b80635e16d9df146102875780635fcbd2851461029a57806370a08231146102d257806395d89b41146103085780639dc29fac1461031d578063a457c2d71461033d57005b8063313ce567116100ff578063313ce567146101fb57806339509351146102175780633eaaf86b1461023757806340c10f191461024c578063582cf7811461026c57806359bf5d391461027f57005b806305fe138b1461014157806306fdde0314610161578063095ea7b31461018c57806318160ddd146101bc57806323b872dd146101db57005b3661013f57005b005b34801561014d57600080fd5b5061013f61015c3660046119dc565b610403565b34801561016d57600080fd5b50610176610759565b6040516101839190611a08565b60405180910390f35b34801561019857600080fd5b506101ac6101a7366004611a5d565b6107eb565b6040519015158152602001610183565b3480156101c857600080fd5b506002545b604051908152602001610183565b3480156101e757600080fd5b506101ac6101f6366004611a87565b610803565b34801561020757600080fd5b5060405160128152602001610183565b34801561022357600080fd5b506101ac610232366004611a5d565b610827565b34801561024357600080fd5b506101cd610849565b34801561025857600080fd5b5061013f610267366004611a5d565b610859565b6101cd61027a366004611ac3565b61089d565b6101cd61095c565b61013f610295366004611adc565b6109e2565b3480156102a657600080fd5b506005546102ba906001600160a01b031681565b6040516001600160a01b039091168152602001610183565b3480156102de57600080fd5b506101cd6102ed366004611b11565b6001600160a01b031660009081526020819052604090205490565b34801561031457600080fd5b50610176610cbb565b34801561032957600080fd5b5061013f610338366004611a5d565b610cca565b34801561034957600080fd5b506101ac610358366004611a5d565b610d0a565b34801561036957600080fd5b506101ac610378366004611a5d565b610d85565b61013f61038b3660046119dc565b610d93565b61013f61039e3660046119dc565b610fdf565b3480156103af57600080fd5b506101cd6103be366004611b33565b611350565b3480156103cf57600080fd5b506101cd6103de366004611ac3565b61137b565b3480156103ef57600080fd5b506006546102ba906001600160a01b031681565b610411565b60405180910390fd5b60055460408051633eaaf86b60e01b8152905147926000926001600160a01b0390911691633eaaf86b91600480820192602092909190829003018186803b15801561045b57600080fd5b505afa15801561046f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104939190611b5d565b6006546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190611b5d565b90506000826105238786611b8c565b61052d9190611bab565b905060008361053c8885611b8c565b6105469190611bab565b600554604051632770a7eb60e21b81526001600160a01b038981166004830152602482018b9052929350911690639dc29fac90604401600060405180830381600087803b15801561059657600080fd5b505af11580156105aa573d6000803e3d6000fd5b505060065460405163095ea7b360e01b8152306004820152602481018590526001600160a01b03909116925063095ea7b39150604401602060405180830381600087803b1580156105fa57600080fd5b505af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190611bcd565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106679030908a908690600401611bef565b602060405180830381600087803b15801561068157600080fd5b505af1158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b99190611bcd565b50600080876001600160a01b03168460405160006040518083038185875af1925050503d8060008114610708576040519150601f19603f3d011682016040523d82523d6000602084013e61070d565b606091505b50915091508387877f971a182078c546404caf9255c1220729cb525f1a9717b2a5b9cc8859971abbb88660405161074691815260200190565b60405180910390a4505050505050505050565b60606003805461076890611c13565b80601f016020809104026020016040519081016040528092919081815260200182805461079490611c13565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b5050505050905090565b6000336107f981858561142d565b5060019392505050565b600033610811858285611551565b61081c8585856115c5565b506001949350505050565b6000336107f981858561083a8383611350565b6108449190611c4e565b61142d565b600061085460025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a36108998282611793565b5050565b6000806108a861095c565b905060006108b68447611c66565b905060006108c5856063611b8c565b905060006108d4836064611b8c565b90506000831180156108e65750600084115b6109025760405162461bcd60e51b815260040161040890611c7d565b600061090e8288611c4e565b6109188685611b8c565b6109229190611bab565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190611b5d565b92915050565b60006109ec61095c565b90504760006109fc866063611b8c565b90506000610a0b846064611b8c565b9050600084118015610a1d5750600083115b610a395760405162461bcd60e51b815260040161040890611c7d565b6000610a458289611c4e565b610a4f8585611b8c565b610a599190611bab565b905086811015610aab5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610408565b60065460405163095ea7b360e01b81526001600160a01b038881166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b319190611bcd565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610b6690899030908690600401611bef565b602060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190611bcd565b50600080876001600160a01b03168360405160006040518083038185875af1925050503d8060008114610c07576040519150601f19603f3d011682016040523d82523d6000602084013e610c0c565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a48484877f971a182078c546404caf9255c1220729cb525f1a9717b2a5b9cc8859971abbb886604051610ca791815260200190565b60405180910390a450505050505050505050565b60606004805461076890611c13565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a36108998282611872565b60003381610d188286611350565b905083811015610d785760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610408565b61081c828686840361142d565b6000336107f98185856115c5565b6000610d9d61095c565b90506000610dab3447611c66565b90506000610dba346063611b8c565b90506000610dc9836064611b8c565b9050600083118015610ddb5750600084115b610df75760405162461bcd60e51b815260040161040890611c7d565b6000610e038234611c4e565b610e0d8685611b8c565b610e179190611bab565b905086811015610e695760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e670000006044820152606401610408565b60065460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610eb557600080fd5b505af1158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190611bcd565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610f229030908a908690600401611bef565b602060405180830381600087803b158015610f3c57600080fd5b505af1158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190611bcd565b506040516832ba3417ba37b5b2b760b91b815260090160405190819003812060065483835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a450505050505050565b6000610fe961095c565b9050806110e2576005546040516340c10f1960e01b81526001600160a01b03848116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b15801561103e57600080fd5b505af1158015611052573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061108a90859030908890600401611bef565b602060405180830381600087803b1580156110a457600080fd5b505af11580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc9190611bcd565b50505050565b60006110ee3447611c66565b90506000816110fd8434611b8c565b6111079190611bab565b90508085101561117f5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e74206163636570746564000000006064820152608401610408565b6006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906111b390879030908690600401611bef565b602060405180830381600087803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112059190611bcd565b5060008234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561125857600080fd5b505afa15801561126c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112909190611b5d565b61129a9190611b8c565b6112a49190611bab565b6005546040516340c10f1960e01b81526001600160a01b038881166004830152602482018a90529293509116906340c10f1990604401600060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050508282827f971a182078c546404caf9255c1220729cb525f1a9717b2a5b9cc8859971abbb83460405161134091815260200190565b60405180910390a4505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60008061138661095c565b9050476000611396856063611b8c565b905060006113a5846064611b8c565b90506000841180156113b75750600083115b6113d35760405162461bcd60e51b815260040161040890611c7d565b60006113df8288611c4e565b6113e98585611b8c565b6113f39190611bab565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b03831661148f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610408565b6001600160a01b0382166114f05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610408565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061155d8484611350565b905060001981146110dc57818110156115b85760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610408565b6110dc848484840361142d565b6001600160a01b0383166116295760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610408565b6001600160a01b03821661168b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610408565b6001600160a01b038316600090815260208190526040902054818110156117035760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610408565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061173a908490611c4e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161178691815260200190565b60405180910390a36110dc565b6001600160a01b0382166117e95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610408565b80600260008282546117fb9190611c4e565b90915550506001600160a01b03821660009081526020819052604081208054839290611828908490611c4e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166118d25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610408565b6001600160a01b038216600090815260208190526040902054818110156119465760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610408565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611975908490611c66565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b80356001600160a01b03811681146119d757600080fd5b919050565b600080604083850312156119ef57600080fd5b823591506119ff602084016119c0565b90509250929050565b600060208083528351808285015260005b81811015611a3557858101830151858201604001528201611a19565b81811115611a47576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611a7057600080fd5b611a79836119c0565b946020939093013593505050565b600080600060608486031215611a9c57600080fd5b611aa5846119c0565b9250611ab3602085016119c0565b9150604084013590509250925092565b600060208284031215611ad557600080fd5b5035919050565b600080600060608486031215611af157600080fd5b8335925060208401359150611b08604085016119c0565b90509250925092565b600060208284031215611b2357600080fd5b611b2c826119c0565b9392505050565b60008060408385031215611b4657600080fd5b611b4f836119c0565b91506119ff602084016119c0565b600060208284031215611b6f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ba657611ba6611b76565b500290565b600082611bc857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611bdf57600080fd5b81518015158114611b2c57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c90821680611c2757607f821691505b60208210811415611c4857634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611c6157611c61611b76565b500190565b600082821015611c7857611c78611b76565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e7400000000000000000060408201526060019056fea2646970667358221220c7c383a0dea1d73259971579cd83fc372388745e68de7cb5590a5935fb44f92064736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bd1806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101c5578063a457c2d7146101d8578063a9059cbb146101eb578063dd62ed3e146101fe57600080fd5b806340c10f191461017f57806370a082311461019457806395d89b41146101bd57600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780633eaaf86b1461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610211565b60405161010491906109ef565b60405180910390f35b61012061011b366004610a60565b6102a3565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610a8a565b6102bb565b60405160128152602001610104565b610120610172366004610a60565b6102df565b610134610301565b61019261018d366004610a60565b610311565b005b6101346101a2366004610ac6565b6001600160a01b031660009081526020819052604090205490565b6100f7610355565b6101926101d3366004610a60565b610364565b6101206101e6366004610a60565b6103a4565b6101206101f9366004610a60565b610424565b61013461020c366004610ae8565b610432565b60606003805461022090610b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461024c90610b1b565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b5050505050905090565b6000336102b181858561045d565b5060019392505050565b6000336102c9858285610582565b6102d48585856105fc565b506001949350505050565b6000336102b18185856102f28383610432565b6102fc9190610b6c565b61045d565b600061030c60025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361035182826107ca565b5050565b60606004805461022090610b1b565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361035182826108a9565b600033816103b28286610432565b9050838110156104175760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102d4828686840361045d565b6000336102b18185856105fc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104bf5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161040e565b6001600160a01b0382166105205760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161040e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061058e8484610432565b905060001981146105f657818110156105e95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161040e565b6105f6848484840361045d565b50505050565b6001600160a01b0383166106605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161040e565b6001600160a01b0382166106c25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161040e565b6001600160a01b0383166000908152602081905260409020548181101561073a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161040e565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610771908490610b6c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107bd91815260200190565b60405180910390a36105f6565b6001600160a01b0382166108205760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161040e565b80600260008282546108329190610b6c565b90915550506001600160a01b0382166000908152602081905260408120805483929061085f908490610b6c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166109095760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161040e565b6001600160a01b0382166000908152602081905260409020548181101561097d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161040e565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109ac908490610b84565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610575565b600060208083528351808285015260005b81811015610a1c57858101830151858201604001528201610a00565b81811115610a2e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a5b57600080fd5b919050565b60008060408385031215610a7357600080fd5b610a7c83610a44565b946020939093013593505050565b600080600060608486031215610a9f57600080fd5b610aa884610a44565b9250610ab660208501610a44565b9150604084013590509250925092565b600060208284031215610ad857600080fd5b610ae182610a44565b9392505050565b60008060408385031215610afb57600080fd5b610b0483610a44565b9150610b1260208401610a44565b90509250929050565b600181811c90821680610b2f57607f821691505b60208210811415610b5057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b7f57610b7f610b56565b500190565b600082821015610b9657610b96610b56565b50039056fea2646970667358221220909e1b5ad7b3f4bbd47336dc69b3c6f390494bd61e4cb5bbc580bfba73fa8e8264736f6c63430008080033a2646970667358221220474c60ba562a768ec08c574d98acfa934aaedc7eef7fa5ba39969cf7e9d1f4f664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/Dex.sol:Dex",
        "label": "pool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Pool)1724"
      },
      {
        "astId": 734,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Pool)1724)"
      },
      {
        "astId": 738,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMappingAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 740,
        "contract": "contracts/Dex.sol:Dex",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Pool)1724": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_contract(Pool)1724)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Pool)",
        "numberOfBytes": "32",
        "value": "t_contract(Pool)1724"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}