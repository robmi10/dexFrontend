{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_createBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "createPoolEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSwapAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ethBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lpTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpTokenBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenReserve",
          "type": "uint256"
        }
      ],
      "name": "liquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ethBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lpTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpTokenBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenReserve",
          "type": "uint256"
        }
      ],
      "name": "liquidityRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_ethReserve",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_inputAmountFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fullEthReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_msgValue",
          "type": "uint256"
        }
      ],
      "name": "swapToToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_useraddress",
          "type": "address"
        }
      ],
      "name": "userAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMapping",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMappingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getEthReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getLiquidityStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmountEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getfullEthReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_getinputAmountFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_removeLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimateamount",
          "type": "uint256"
        }
      ],
      "name": "_swapEthToToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_swapTokenToEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x80e5249fc7d7787bf7e3f3ba68165bb4246b605ba0668decee60a301170232ec",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "3709355",
    "logsBloom": "0x
    "blockHash": "0x390820632f970c94a9a465cbefb122c9b8b83feac9e55e5f662e6a746b8c0ecb",
    "transactionHash": "0x80e5249fc7d7787bf7e3f3ba68165bb4246b605ba0668decee60a301170232ec",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "3709355",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fb409f49855a655116fdcbb13b102f9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_createBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"createPoolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenReserve\",\"type\":\"uint256\"}],\"name\":\"liquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenReserve\",\"type\":\"uint256\"}],\"name\":\"liquidityRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_ethReserve\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_inputAmountFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fullEthReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_msgValue\",\"type\":\"uint256\"}],\"name\":\"swapToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"userAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMapping\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMappingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getEthReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getLiquidityStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmountEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getfullEthReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getinputAmountFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_removeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimateamount\",\"type\":\"uint256\"}],\"name\":\"_swapEthToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_swapTokenToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex.sol\":\"Dex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Dex {\\n    Pool public  pool;\\n    event userAddress (address indexed _useraddress);\\n    event createPoolEvent (address indexed _createBy, address indexed _token ,uint256 indexed _id);\\n    event liquidity (address indexed _from, uint256 indexed _lpTokenSupply, uint256 indexed _mintedAmount, uint256 _ethBalance, address _lpTokenAddress, uint256 _amount, uint256 _lpTokenBalance, uint256 _tokenReserve);\\n    event liquidityRemove (address indexed _from, uint256 indexed _lpTokenSupply, uint256 indexed _mintedAmount, uint256 _ethBalance, address _lpTokenAddress, uint256 _amount, uint256 _lpTokenBalance, uint256 _tokenReserve );\\n    event swapToToken (uint256 indexed _ethReserve,uint256 indexed _inputAmountFee, uint256  _fullEthReserve, uint256  _outputAmount, uint256  _msgValue);\\n    event getSwapAmount (uint256 _amount);\\n    mapping (uint256 => Pool) public PoolMapping;\\n    mapping (uint256 => address) public PoolMappingAddress;\\n    uint256 public counter;\\n    constructor () payable{}\\n\\n     function getPoolAddress(uint256 _pool) public view returns(address){\\n        return address(PoolMapping[_pool]);\\n    }\\n\\n    function createPool(address tokenA) public payable {\\n        pool = new Pool(tokenA);\\n        PoolMapping[counter] = pool;\\n        emit createPoolEvent(msg.sender, address(pool), counter);\\n        emit userAddress (address(pool));\\n        counter += 1;\\n    }\\n\\n    \\n    function _addLiquidity(uint256 _pool, uint256 _amount) public payable {\\n        require(_amount >= msg.value, \\\"to little amount\\\");\\n        pool =  Pool(payable(address(PoolMapping[_pool])));\\n        (address from, uint256 lpTotalSupply, uint256 _estimatedAmount, uint256 _ethReserve,  address lpTokenAddress, uint256 _lpTokenBalance, uint256 _daiReserve) = pool.addLiquidity{ value: msg.value }(_amount, msg.sender);\\n        emit liquidity(from, lpTotalSupply, _estimatedAmount, _ethReserve, lpTokenAddress, _amount, _lpTokenBalance, _daiReserve);\\n    }\\n\\n    function _removeLiquidity(uint256 _pool, uint256 _amount) public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool]))); \\n        (address from, uint256 lpTotalSupply, uint256 _estimatedAmount, uint256 _ethReserve,  address lpTokenAddress, uint256 _lpTokenBalance, uint256 _daiReserve) = pool.removeLiquidity(_amount, msg.sender);\\n        emit liquidityRemove(from, lpTotalSupply, _estimatedAmount, _ethReserve, lpTokenAddress, _amount, _lpTokenBalance, _daiReserve);\\n    }\\n\\n    function _swapTokenToEth(uint256 _pool, uint256 _amount, uint256 _estimatedAmount, address _account) public payable{\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        pool.swapTokenToEth{ value: msg.value }(_amount, _estimatedAmount, _account);\\n        emit getSwapAmount(msg.value);\\n        //if true return the values needed here in an event\\n    }\\n\\n    function _swapEthToToken(uint256 _pool, uint256 _amount, uint256 _estimateamount) public payable{\\n         pool = Pool(payable(address(PoolMapping[_pool])));\\n         pool.swapEthToToken{ value: msg.value }(_amount, _estimateamount, msg.sender);\\n         emit getSwapAmount(msg.value);\\n    }\\n    \\n    function _getSwapAmount(uint256 _pool, uint256 _amount)  public returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 swapamount) = pool.getSwapAmountDai(_amount);\\n        emit getSwapAmount(swapamount);\\n        return swapamount;\\n    }\\n\\n    function _getSwapAmountEth(uint256 _pool, uint256 _amount)  public  returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 swapamount) = pool.getSwapAmountEth(_amount);\\n        emit getSwapAmount(swapamount);\\n        return swapamount;\\n    }\\n\\n     function _getAmount(uint256 _pool, uint256 _amount)  public  returns (uint256, uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 calcAmount, uint256 amountCheck) = pool.getSwapAmountEthSecond(_amount);\\n        emit getSwapAmount(amountCheck);\\n        return (calcAmount, amountCheck);\\n    }\\n\\n     function _getLiquidityStatus(uint256 _pool, uint256 _amount)  public  returns (uint256, uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 calcAmount, uint256 amountCheck) = pool.getLiquidityStatus(_amount);\\n        emit getSwapAmount(amountCheck);\\n        return (calcAmount, amountCheck);\\n    }\\n\\n      function _getReserve(uint256 _pool, uint256 _amount)  public returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 reserveAmount) = pool.getReserve();\\n        emit getSwapAmount(reserveAmount);\\n        return reserveAmount;\\n    }\\n\\n      function _getEthReserve(uint256 _pool, uint256 _amount)  public  returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 ethreserveAmount) = pool.getEthReserve();\\n        emit getSwapAmount(ethreserveAmount);\\n        return ethreserveAmount;\\n    }\\n\\n    function _getinputAmountFee(uint256 _pool, uint256 _amount) public returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 inputAmountFeeAmount) = pool.getinputAmountFee(_amount);\\n        emit getSwapAmount(inputAmountFeeAmount);\\n        return inputAmountFeeAmount;\\n    }\\n\\n    function _getfullEthReserve(uint256 _pool, uint256 _amount)  public returns (uint256){\\n        pool = Pool(payable(address(PoolMapping[_pool])));\\n        (uint256 fullEthReserve) = pool.getfullEthReserve();\\n        emit getSwapAmount(fullEthReserve);\\n        return fullEthReserve;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xffcadf727ffc247de5f9c612daa13a91ffa7cb0bbb7f1bcaf5b1cd2f1ceaee58\",\"license\":\"MIT\"},\"contracts/LIToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract LIToken is ERC20{\\n    event minted(address indexed _user, uint256 indexed _amount);\\n    event burned(address indexed _user, uint256 indexed _amount);\\n\\n    constructor() ERC20('Lp', 'LPToken'){\\n    }\\n\\n    function mint(address _sender, uint256 _amount) external {\\n        emit minted(_sender, _amount);\\n        _mint(_sender, _amount);\\n    }\\n\\n    function burn(address _sender, uint256 _amount) external {\\n         emit burned(_sender, _amount);\\n        _burn(_sender, _amount);\\n    }\\n\\n    function _totalSupply() public view returns(uint256){\\n         return totalSupply();\\n    }\\n\\n    function _balanceOf(address _from) public view returns(uint256){\\n         return balanceOf(_from);\\n    }\\n\\n    function _getAddresLp() public view returns(address){\\n         return address(this);\\n    }\\n\\n}\",\"keccak256\":\"0x687ddc01a5ac2aa7bdce1dc11907d9912a27b021981264d3f7300c24a466de53\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./LIToken.sol\\\";\\n\\n//Skapa den h\\u00e4r kontrakten som en pool ist\\u00e4llet och den h\\u00e4r poolen har allts\\u00e5 sin egna address.\\n//Poolen ska d\\u00e4refter kunna kallas fr\\u00e5n en annan Kontrakt som ska vara sj\\u00e4lva Dex och ta hand om varje pool som exisiterar.\\n//D\\u00e4rf\\u00f6r g\\u00f6r om denna kontrakt s\\u00e5 att den \\u00e4r kopplad till eth msg.value() ist\\u00e4llet f\\u00f6r \\\"weth\\\" sen skapa den riktiga Dex \\\"manage\\\" kontrakten.\\n//I Dex kontraktet spara alla olika pools i en mapping och kalla deras funktioner med hj\\u00e4lp av en \\n\\ncontract Pool is IERC20, LIToken {\\n    LIToken public lpToken;\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    address public erc20TokenAddress;\\n    mapping(address => uint256) WethMapping;\\n    event tokenSwap(address indexed token, address indexed swapper, string indexed swap, uint256 _amount);\\n    event liquidityPool( uint256 indexed amount, address indexed provider, uint256 indexed reserve);\\n\\n    event balancesCheck(address _from, uint256 indexed totalSupply, uint256 indexed ethBalance, uint256 indexed ethBackToUser, uint256 liquidityBackToUser);\\n    event balanceCall(uint256 indexed _amount, uint256 indexed _secondamount);\\n\\n\\n    constructor(address _erc20TokenAddress) {\\n        require(_erc20TokenAddress != address(0));\\n        erc20TokenAddress = _erc20TokenAddress;\\n        lpToken = new LIToken();\\n    }\\n\\n    function getReserve() public payable returns(uint256) {\\n        uint256 balaceGet = IERC20(erc20TokenAddress).balanceOf(address(this));\\n        return balaceGet;\\n    }\\n\\n     function getEthReserve() public payable returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n     function getinputAmountFee(uint256 _amount) public payable returns(uint256) {\\n        uint256 inputAmountFee = _amount * 99;\\n        return inputAmountFee;\\n    }\\n\\n    function getfullEthReserve() public payable returns(uint256) {\\n        uint256 fullEthReserve = getEthReserve() * 100;\\n        return fullEthReserve;\\n       \\n    }\\n\\n     function getLiquidityStatus(uint _amount) public payable returns(uint256, uint256) {\\n         uint256 _ethReserve = address(this).balance - _amount;\\n        uint256 amountStatus = (_amount * getReserve()) / (_ethReserve);\\n        return (amountStatus, _amount);   \\n    }\\n\\nfunction addLiquidity (uint _amount, address _sender) public payable returns (address, uint256, uint256, uint256, address, uint256, uint256) {\\n    uint256 _ethReserve = address(this).balance - msg.value;\\n    if(getReserve() == 0){\\n        lpToken.mint(_sender, _amount);\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), _amount);\\n        return (_sender, lpToken._totalSupply(), getReserve(), address(this).balance, address(lpToken), lpToken._balanceOf(_sender), getReserve());\\n    }else{\\n\\n    require(_amount >= (msg.value * getReserve()) / (_ethReserve), \\\"not accepted liquidity less then the minimum amount accepted\\\");\\n    /*IERC20(erc20TokenAddress).approve(address(this), acceptedLiquidityAmount);*/\\n    IERC20(erc20TokenAddress).transferFrom(_sender, address(this), (msg.value * getReserve()) / (_ethReserve));\\n    \\n    lpToken.mint(_sender, (lpToken._totalSupply() * msg.value) / (_ethReserve));    \\n    // emit balancesCheck(_sender, _amount, acceptedLiquidityAmount, _ethReserve, msg.value);\\n\\n    return (_sender, lpToken._totalSupply(), (lpToken._totalSupply() * msg.value) / (_ethReserve), address(this).balance, address(lpToken), lpToken._balanceOf(_sender), getReserve());\\n    }\\n}\\n    // remove liquidity\\n    function removeLiquidity(uint _amount, address _sender) public payable returns (address, uint256, uint256, uint256, address, uint256, uint256) {\\n        require(_amount >= 0, \\\"small amount\\\");  \\n        lpToken.burn(_sender, _amount);\\n        IERC20(erc20TokenAddress).approve(address(this), (IERC20(erc20TokenAddress).balanceOf(address(this)) * _amount) / lpToken._totalSupply());\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, (IERC20(erc20TokenAddress).balanceOf(address(this)) * _amount) / lpToken._totalSupply());\\n        _sender.call{value: address(this).balance * _amount / lpToken._totalSupply()}(\\\"\\\");\\n        return (_sender, lpToken._totalSupply(), _amount, address(this).balance, address(lpToken),  lpToken._balanceOf(_sender), getReserve());\\n    }\\n\\n    function getSwapAmountEth(uint256 _amount) public payable returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - _amount;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (_amount + fullEthReserve);\\n        emit balanceCall(_amount, outputAmount);\\n        return outputAmount;\\n    }\\n\\n\\n    function getSwapAmountDai(uint256 _amount) public returns (uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\\n\\n\\n        // uint256 erc20Reserve = getReserve();\\n        // uint256 ethReserve = address(this).balance - msg.value;\\n        // uint256 inputAmountFee = msg.value * 99;\\n        // uint256 fullEthReserve = ethReserve * 100;\\n        // require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        // uint256 outputAmount = (inputAmountFee * erc20Reserve) / (msg.value + fullEthReserve);\\n\\n\\n\\n        //emit balancesCheck (ethReserve, erc20Reserve ,inputAmountFee, outputAmount);\\n        emit balanceCall(outputAmount, fullErc20Reserve);\\n        return outputAmount;\\n    }\\n\\n\\n    function getSwapAmountEthSecond(uint256 _amount) public payable returns (uint256, uint256){\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - _amount;\\n        uint256 inputAmountFee = _amount * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (_amount + fullEthReserve);\\n        // require(outputAmount >= _amount, \\\"to little toEth for swapping\\\");\\n        emit balanceCall(_amount, outputAmount);\\n        return (outputAmount, _amount);\\n    }\\n\\n    function swapEthToToken(uint256 _amount, uint256 _estimateamount, address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 inputAmountFee = msg.value * 99;\\n        uint256 fullEthReserve = ethReserve * 100;\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (msg.value + fullEthReserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        // require(outputAmount >= _amount, \\\"to little amount for swapEthToToken\\\");\\n        IERC20(erc20TokenAddress).approve(address(this), _estimateamount);\\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, _estimateamount);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"eth/token\\\", _amount);\\n    }\\n \\n    function swapTokenToEth(uint256 _amount, uint256 _ethBackToUser ,address _sender) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        uint256 inputAmountFee = msg.value * 99;\\n        uint256 fullErc20Reserve = erc20Reserve * 100;\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (msg.value + fullErc20Reserve);\\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n        require(outputAmount >= _ethBackToUser, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(_sender, msg.value);\\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), msg.value);\\n        (bool call, bytes memory data) = _sender.call{value: _ethBackToUser}(\\\"\\\");\\n        //emit transferSwap(outputAmount, data, call);\\n        emit tokenSwap(erc20TokenAddress, _sender, \\\"token/eth\\\", outputAmount);\\n        emit balancesCheck (_sender, ethReserve, fullErc20Reserve ,inputAmountFee, outputAmount);\\n    }\\n\\n\\n    \\n}\\n\\n\",\"keccak256\":\"0x8d34553fa1076402d080e04878d621814cc6a7490ff19d23b519a73b6ab03d62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052614233806100136000396000f3fe6080604052600436106200011e5760003560e01c806355b7768c11620000a157806383fea74c116200006c57806383fea74c146200034d5780639049f9d214620003725780639e8af2af1462000389578063e905730314620003a0578063ecc861d014620003c557600080fd5b806355b7768c14620002d457806361bc221a14620002f9578063684d4cd014620003115780636d7fd8fe146200032857600080fd5b806316095f6c11620000ee57806316095f6c146200020757806316f0115b146200023b5780631be7f700146200025d5780632f812b8c14620002985780635405755a14620002af57600080fd5b8062a5ae21146200012357806304c55b92146200017a5780630b6af77614620001b457806315f08f2c14620001cd575b600080fd5b3480156200013057600080fd5b506200015d6200014236600462000cee565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200018757600080fd5b506200015d6200019936600462000cee565b6001602052600090815260409020546001600160a01b031681565b620001cb620001c536600462000d08565b620003ea565b005b348015620001da57600080fd5b506200015d620001ec36600462000cee565b6002602052600090815260409020546001600160a01b031681565b3480156200021457600080fd5b506200022c6200022636600462000d08565b62000526565b60405190815260200162000171565b3480156200024857600080fd5b506000546200015d906001600160a01b031681565b3480156200026a57600080fd5b50620002826200027c36600462000d08565b620005fa565b6040805192835260208301919091520162000171565b620001cb620002a936600462000d2b565b620006d7565b348015620002bc57600080fd5b506200022c620002ce36600462000d08565b62000790565b348015620002e157600080fd5b506200022c620002f336600462000d08565b620007f4565b3480156200030657600080fd5b506200022c60035481565b620001cb6200032236600462000d71565b62000858565b3480156200033557600080fd5b506200022c6200034736600462000d08565b62000915565b3480156200035a57600080fd5b50620002826200036c36600462000d08565b62000979565b620001cb6200038336600462000db5565b620009ce565b620001cb6200039a36600462000d08565b62000acb565b348015620003ad57600080fd5b506200022c620003bf36600462000d08565b62000c3e565b348015620003d257600080fd5b506200022c620003e436600462000d08565b62000c8f565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516305fe138b60e01b8152600481018490523360248201528291829182918291829182916305fe138b9060440160e060405180830381600087803b1580156200045f57600080fd5b505af115801562000474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049a919062000ddc565b96509650965096509650965096508486886001600160a01b03167fba8167b20fb82b32203505d2af31a84cccc310ee858a21f2b99a19b09956840c87878d8888604051620005139594939291909485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b60405180910390a4505050505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905282919063582cf781906024015b602060405180830381600087803b1580156200058d57600080fd5b505af1158015620005a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005c8919062000e4c565b9050600080516020620041de83398151915281604051620005eb91815260200190565b60405180910390a19392505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051631ae6a0d760e11b815260048101849052829182918291906335cd41ae906024015b6040805180830381600087803b1580156200066457600080fd5b505af115801562000679573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200069f919062000e66565b91509150600080516020620041de83398151915281604051620006c491815260200190565b60405180910390a1909590945092505050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b039091169081179092555163a68bb24960e01b8152600481018490526024810183905233604482015263a68bb2499034906064016000604051808303818588803b1580156200074857600080fd5b505af11580156200075d573d6000803e3d6000fd5b5050505050600080516020620041de833981519152346040516200078391815260200190565b60405180910390a1505050565b60008281526001602090815260408083205483546001600160a01b0319166001600160a01b03909116908117845581516359bf5d3960e01b81529151849391926359bf5d3992600480830193919282900301818787803b1580156200058d57600080fd5b60008281526001602090815260408083205483546001600160a01b0319166001600160a01b039091169081178455815163022a446360e61b8152915184939192638a9118c092600480830193919282900301818787803b1580156200058d57600080fd5b6000848152600160205260408082205482546001600160a01b0319166001600160a01b039182169081179093559051635e16d9df60e01b815260048101869052602481018590529083166044820152635e16d9df9034906064016000604051808303818588803b158015620008cc57600080fd5b505af1158015620008e1573d6000803e3d6000fd5b5050505050600080516020620041de833981519152346040516200090791815260200190565b60405180910390a150505050565b60008281526001602090815260408083205483546001600160a01b0319166001600160a01b0390911690811784558151638703694360e01b8152915184939192638703694392600480830193919282900301818787803b1580156200058d57600080fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051635e9bc2f960e01b81526004810184905282918291829190635e9bc2f9906024016200064a565b80604051620009dd9062000ce0565b6001600160a01b039091168152602001604051809103906000f08015801562000a0a573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917ff86e3d2fc794443a042a24aab307e2450c5ea5ddde4894a5db19df1339e0e23b9190a4600080546040516001600160a01b03909116917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a260016003600082825462000ac3919062000e8b565b909155505050565b3481101562000b135760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516364afce8760e11b81526004810184905233602482015282918291829182918291829163c95f9d0e90349060440160e0604051808303818588803b15801562000b8957600080fd5b505af115801562000b9e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000bc5919062000ddc565b96509650965096509650965096508486886001600160a01b03167f8df84fafdab28db8aea5e9eb3a42bac9e9dddfddf14d579c198c13489729e1e187878d8888604051620005139594939291909485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630a72275360e01b815260048101849052829190630a7227539060240162000572565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905282919063de703e109060240162000572565b61332b8062000eb383390190565b60006020828403121562000d0157600080fd5b5035919050565b6000806040838503121562000d1c57600080fd5b50508035926020909101359150565b60008060006060848603121562000d4157600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811462000d6e57600080fd5b50565b6000806000806080858703121562000d8857600080fd5b843593506020850135925060408501359150606085013562000daa8162000d58565b939692955090935050565b60006020828403121562000dc857600080fd5b813562000dd58162000d58565b9392505050565b600080600080600080600060e0888a03121562000df857600080fd5b875162000e058162000d58565b80975050602088015195506040880151945060608801519350608088015162000e2e8162000d58565b8093505060a0880151915060c0880151905092959891949750929550565b60006020828403121562000e5f57600080fd5b5051919050565b6000806040838503121562000e7a57600080fd5b505080516020909101519092909150565b6000821982111562000ead57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b506040516200332b3803806200332b8339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d6280620025c983390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b61237e806200024b6000396000f3fe6080604052600436106101b95760003560e01c80635fcbd285116100eb578063a457c2d71161008f578063cca3e83211610061578063cca3e832146104cd578063dd62ed3e146104ed578063de703e101461050d578063f835cd3c1461052d57005b8063a457c2d714610467578063a68bb24914610487578063a9059cbb1461049a578063c95f9d0e146104ba57005b80638a9118c0116100c85780638a9118c01461041957806394d0851d1461041f57806395d89b41146104325780639dc29fac1461044757005b80635fcbd285146103a357806370a08231146103db578063870369431461041157005b806335cd41ae1161015d578063582cf7811161012f578063582cf7811461036257806359bf5d39146103755780635e16d9df1461037d5780635e9bc2f91461039057005b806335cd41ae146102e5578063395093511461030d5780633eaaf86b1461032d57806340c10f191461034257005b80630a722753116101965780630a7227531461027357806318160ddd1461029457806323b872dd146102a9578063313ce567146102c957005b806305fe138b146101c257806306fdde0314610221578063095ea7b31461024357005b366101c057005b005b6101d56101d0366004612077565b61054d565b604080516001600160a01b03988916815260208101979097528601949094526060850192909252909316608083015260a082019290925260c081019190915260e0015b60405180910390f35b34801561022d57600080fd5b50610236610af3565b60405161021891906120a3565b34801561024f57600080fd5b5061026361025e3660046120f8565b610b85565b6040519015158152602001610218565b610286610281366004612122565b610b9d565b604051908152602001610218565b3480156102a057600080fd5b50600254610286565b3480156102b557600080fd5b506102636102c436600461213b565b610bb2565b3480156102d557600080fd5b5060405160128152602001610218565b6102f86102f3366004612122565b610bd6565b60408051928352602083019190915201610218565b34801561031957600080fd5b506102636103283660046120f8565b610c97565b34801561033957600080fd5b50610286610cb9565b34801561034e57600080fd5b506101c061035d3660046120f8565b610cc9565b610286610370366004612122565b610d0d565b610286610dcc565b6101c061038b366004612177565b610e52565b6102f861039e366004612122565b611136565b3480156103af57600080fd5b506005546103c3906001600160a01b031681565b6040516001600160a01b039091168152602001610218565b3480156103e757600080fd5b506102866103f63660046121ac565b6001600160a01b031660009081526020819052604090205490565b61028661116d565b47610286565b34801561042b57600080fd5b50306103c3565b34801561043e57600080fd5b5061023661117b565b34801561045357600080fd5b506101c06104623660046120f8565b61118a565b34801561047357600080fd5b506102636104823660046120f8565b6111ca565b6101c0610495366004612177565b611245565b3480156104a657600080fd5b506102636104b53660046120f8565b611441565b6101d56104c8366004612077565b61144f565b3480156104d957600080fd5b506102866104e83660046121ac565b6119ce565b3480156104f957600080fd5b506102866105083660046121c7565b6119ec565b34801561051957600080fd5b50610286610528366004612122565b611a17565b34801561053957600080fd5b506006546103c3906001600160a01b031681565b6000808080808080610563565b60405180910390fd5b600554604051632770a7eb60e21b81526001600160a01b038a81166004830152602482018c905290911690639dc29fac90604401600060405180830381600087803b1580156105b157600080fd5b505af11580156105c5573d6000803e3d6000fd5b505060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416955063095ea7b39450309390921691633eaaf86b91600480820192602092909190829003018186803b15801561061d57600080fd5b505afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065591906121f1565b6006546040516370a0823160e01b81523060048201528e916001600160a01b0316906370a082319060240160206040518083038186803b15801561069857600080fd5b505afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d091906121f1565b6106da9190612220565b6106e4919061223f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561072a57600080fd5b505af115801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190612261565b5060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416936323b872dd9330938e939190921691633eaaf86b916004808301926020929190829003018186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f191906121f1565b6006546040516370a0823160e01b81523060048201528f916001600160a01b0316906370a082319060240160206040518083038186803b15801561083457600080fd5b505afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c91906121f1565b6108769190612220565b610880919061223f565b6040518463ffffffff1660e01b815260040161089e93929190612283565b602060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612261565b5060055460408051633eaaf86b60e01b815290516001600160a01b03808c16931691633eaaf86b916004808301926020929190829003018186803b15801561093757600080fd5b505afa15801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096f91906121f1565b6109798b47612220565b610983919061223f565b604051600081818185875af1925050503d80600081146109bf576040519150601f19603f3d011682016040523d82523d6000602084013e6109c4565b606091505b50505087600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e91906121f1565b600554604051636651f41960e11b81526001600160a01b038c811660048301528d924792911690819063cca3e8329060240160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad091906121f1565b610ad8610dcc565b96509650965096509650965096505b92959891949750929550565b606060038054610b02906122a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2e906122a7565b8015610b7b5780601f10610b5057610100808354040283529160200191610b7b565b820191906000526020600020905b815481529060010190602001808311610b5e57829003601f168201915b5050505050905090565b600033610b93818585611ac9565b5060019392505050565b600080610bab836063612220565b9392505050565b600033610bc0858285611bee565b610bcb858585611c68565b506001949350505050565b6000806000610be3610dcc565b90506000610bf185476122e2565b90506000610c00866063612220565b90506000610c0f836064612220565b9050600083118015610c215750600084115b610c3d5760405162461bcd60e51b815260040161055a906122f9565b6000610c498289612330565b610c538685612220565b610c5d919061223f565b905080887fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39795505050505050565b600033610b93818585610caa83836119ec565b610cb49190612330565b611ac9565b6000610cc460025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a3610d098282611e36565b5050565b600080610d18610dcc565b90506000610d2684476122e2565b90506000610d35856063612220565b90506000610d44836064612220565b9050600083118015610d565750600084115b610d725760405162461bcd60e51b815260040161055a906122f9565b6000610d7e8288612330565b610d888685612220565b610d92919061223f565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c91906121f1565b92915050565b6000610e5c610dcc565b9050476000610e6c346063612220565b90506000610e7b846064612220565b9050600084118015610e8d5750600083115b610ea95760405162461bcd60e51b815260040161055a906122f9565b6000610eb58234612330565b610ebf8585612220565b610ec9919061223f565b905086811015610f1b5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161055a565b60065460405163095ea7b360e01b81526001600160a01b0388811660048301523460248301529091169063095ea7b390604401602060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa09190612261565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610fd590899030903490600401612283565b602060405180830381600087803b158015610fef57600080fd5b505af1158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612261565b50600080876001600160a01b03168960405160006040518083038185875af1925050503d8060008114611076576040519150601f19603f3d011682016040523d82523d6000602084013e61107b565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a4604080516001600160a01b038a168152602081018590528691869189917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a450505050505050505050565b6000808061114484476122e2565b9050600081611151610dcc565b61115b9087612220565b611165919061223f565b959350505050565b600080610e4c476064612220565b606060048054610b02906122a7565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a3610d098282611f15565b600033816111d882866119ec565b9050838110156112385760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161055a565b610bcb8286868403611ac9565b600061124f610dcc565b9050600061125d34476122e2565b9050600061126c346063612220565b9050600061127b836064612220565b905060008311801561128d5750600084115b6112a95760405162461bcd60e51b815260040161055a906122f9565b60006112b58234612330565b6112bf8685612220565b6112c9919061223f565b60065460405163095ea7b360e01b8152306004820152602481018a90529192506001600160a01b03169063095ea7b390604401602060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190612261565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906113839030908a908c90600401612283565b602060405180830381600087803b15801561139d57600080fd5b505af11580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190612261565b506040516832ba3417ba37b5b2b760b91b81526009016040519081900381206006548a835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a45050505050505050565b600033610b93818585611c68565b60008080808080808061146234476122e2565b905061146c610dcc565b61167c576005546040516340c10f1960e01b81526001600160a01b038b81166004830152602482018d9052909116906340c10f1990604401600060405180830381600087803b1580156114be57600080fd5b505af11580156114d2573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061150a908c9030908f90600401612283565b602060405180830381600087803b15801561152457600080fd5b505af1158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155c9190612261565b5060055460408051633eaaf86b60e01b815290518b926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b1580156115a157600080fd5b505afa1580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d991906121f1565b6115e1610dcc565b600554604051636651f41960e11b81526001600160a01b038e8116600483015247921690819063cca3e8329060240160206040518083038186803b15801561162857600080fd5b505afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166091906121f1565b611668610dcc565b975097509750975097509750975050610ae7565b80611685610dcc565b61168f9034612220565b611699919061223f565b8a101561170e5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e7420616363657074656400000000606482015260840161055a565b6006546001600160a01b03166323b872dd8a308461172a610dcc565b6117349034612220565b61173e919061223f565b6040518463ffffffff1660e01b815260040161175c93929190612283565b602060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae9190612261565b5060055460408051633eaaf86b60e01b815290516001600160a01b03909216916340c10f19918c91859134918691633eaaf86b916004808301926020929190829003018186803b15801561180157600080fd5b505afa158015611815573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183991906121f1565b6118439190612220565b61184d919061223f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561189357600080fd5b505af11580156118a7573d6000803e3d6000fd5b5050505088600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193291906121f1565b8234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561198257600080fd5b505afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba91906121f1565b6119c49190612220565b6115e1919061223f565b6001600160a01b038116600090815260208190526040812054610e4c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600080611a22610dcc565b9050476000611a32856063612220565b90506000611a41846064612220565b9050600084118015611a535750600083115b611a6f5760405162461bcd60e51b815260040161055a906122f9565b6000611a7b8288612330565b611a858585612220565b611a8f919061223f565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b038316611b2b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161055a565b6001600160a01b038216611b8c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161055a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611bfa84846119ec565b90506000198114611c625781811015611c555760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161055a565b611c628484848403611ac9565b50505050565b6001600160a01b038316611ccc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161055a565b6001600160a01b038216611d2e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161055a565b6001600160a01b03831660009081526020819052604090205481811015611da65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161055a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611ddd908490612330565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e2991815260200190565b60405180910390a3611c62565b6001600160a01b038216611e8c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161055a565b8060026000828254611e9e9190612330565b90915550506001600160a01b03821660009081526020819052604081208054839290611ecb908490612330565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216611f755760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161055a565b6001600160a01b03821660009081526020819052604090205481811015611fe95760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161055a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906120189084906122e2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611be1565b80356001600160a01b038116811461207257600080fd5b919050565b6000806040838503121561208a57600080fd5b8235915061209a6020840161205b565b90509250929050565b600060208083528351808285015260005b818110156120d0578581018301518582016040015282016120b4565b818111156120e2576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561210b57600080fd5b6121148361205b565b946020939093013593505050565b60006020828403121561213457600080fd5b5035919050565b60008060006060848603121561215057600080fd5b6121598461205b565b92506121676020850161205b565b9150604084013590509250925092565b60008060006060848603121561218c57600080fd5b83359250602084013591506121a36040850161205b565b90509250925092565b6000602082840312156121be57600080fd5b610bab8261205b565b600080604083850312156121da57600080fd5b6121e38361205b565b915061209a6020840161205b565b60006020828403121561220357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561223a5761223a61220a565b500290565b60008261225c57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561227357600080fd5b81518015158114610bab57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c908216806122bb57607f821691505b602082108114156122dc57634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156122f4576122f461220a565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e74000000000000000000604082015260600190565b600082198211156123435761234361220a565b50019056fea2646970667358221220d75d7772459e7671cb972ef6bf7cca2c1d1e51090107c842b8b30500f8a92c8e64736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bf5806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101fc578063a9059cbb1461020f578063cca3e832146101aa578063dd62ed3e1461022257600080fd5b806370a08231146101aa57806394d0851d146101d357806395d89b41146101e15780639dc29fac146101e957600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780633eaaf86b1461018d57806340c10f191461019557600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610235565b60405161011a9190610a13565b60405180910390f35b610136610131366004610a84565b6102c7565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610aae565b6102df565b6040516012815260200161011a565b610136610188366004610a84565b610303565b61014a610325565b6101a86101a3366004610a84565b610335565b005b61014a6101b8366004610aea565b6001600160a01b031660009081526020819052604090205490565b60405130815260200161011a565b61010d610379565b6101a86101f7366004610a84565b610388565b61013661020a366004610a84565b6103c8565b61013661021d366004610a84565b610448565b61014a610230366004610b0c565b610456565b60606003805461024490610b3f565b80601f016020809104026020016040519081016040528092919081815260200182805461027090610b3f565b80156102bd5780601f10610292576101008083540402835291602001916102bd565b820191906000526020600020905b8154815290600101906020018083116102a057829003601f168201915b5050505050905090565b6000336102d5818585610481565b5060019392505050565b6000336102ed8582856105a6565b6102f8858585610620565b506001949350505050565b6000336102d58185856103168383610456565b6103209190610b90565b610481565b600061033060025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361037582826107ee565b5050565b60606004805461024490610b3f565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361037582826108cd565b600033816103d68286610456565b90508381101561043b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102f88286868403610481565b6000336102d5818585610620565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610432565b6001600160a01b0382166105445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610432565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105b28484610456565b9050600019811461061a578181101561060d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610432565b61061a8484848403610481565b50505050565b6001600160a01b0383166106845760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610432565b6001600160a01b0382166106e65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610432565b6001600160a01b0383166000908152602081905260409020548181101561075e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610432565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610795908490610b90565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107e191815260200190565b60405180910390a361061a565b6001600160a01b0382166108445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610432565b80600260008282546108569190610b90565b90915550506001600160a01b03821660009081526020819052604081208054839290610883908490610b90565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03821661092d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610432565b6001600160a01b038216600090815260208190526040902054818110156109a15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610432565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109d0908490610ba8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610599565b600060208083528351808285015260005b81811015610a4057858101830151858201604001528201610a24565b81811115610a52576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a7f57600080fd5b919050565b60008060408385031215610a9757600080fd5b610aa083610a68565b946020939093013593505050565b600080600060608486031215610ac357600080fd5b610acc84610a68565b9250610ada60208501610a68565b9150604084013590509250925092565b600060208284031215610afc57600080fd5b610b0582610a68565b9392505050565b60008060408385031215610b1f57600080fd5b610b2883610a68565b9150610b3660208401610a68565b90509250929050565b600181811c90821680610b5357607f821691505b60208210811415610b7457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ba357610ba3610b7a565b500190565b600082821015610bba57610bba610b7a565b50039056fea2646970667358221220c1cad5f121f7371680e535ac51af499ee9735c4dcda66ea809a69819c1245be564736f6c634300080800333c997e25e3fcbbf139bd19b21a519faded9566e7faa33e5eda2d70d3edb95250a2646970667358221220b16c439ac0d5cb50ce8eb2c1632fe6e6c903feaf14d6858e38c448f431dcceca64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106200011e5760003560e01c806355b7768c11620000a157806383fea74c116200006c57806383fea74c146200034d5780639049f9d214620003725780639e8af2af1462000389578063e905730314620003a0578063ecc861d014620003c557600080fd5b806355b7768c14620002d457806361bc221a14620002f9578063684d4cd014620003115780636d7fd8fe146200032857600080fd5b806316095f6c11620000ee57806316095f6c146200020757806316f0115b146200023b5780631be7f700146200025d5780632f812b8c14620002985780635405755a14620002af57600080fd5b8062a5ae21146200012357806304c55b92146200017a5780630b6af77614620001b457806315f08f2c14620001cd575b600080fd5b3480156200013057600080fd5b506200015d6200014236600462000cee565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200018757600080fd5b506200015d6200019936600462000cee565b6001602052600090815260409020546001600160a01b031681565b620001cb620001c536600462000d08565b620003ea565b005b348015620001da57600080fd5b506200015d620001ec36600462000cee565b6002602052600090815260409020546001600160a01b031681565b3480156200021457600080fd5b506200022c6200022636600462000d08565b62000526565b60405190815260200162000171565b3480156200024857600080fd5b506000546200015d906001600160a01b031681565b3480156200026a57600080fd5b50620002826200027c36600462000d08565b620005fa565b6040805192835260208301919091520162000171565b620001cb620002a936600462000d2b565b620006d7565b348015620002bc57600080fd5b506200022c620002ce36600462000d08565b62000790565b348015620002e157600080fd5b506200022c620002f336600462000d08565b620007f4565b3480156200030657600080fd5b506200022c60035481565b620001cb6200032236600462000d71565b62000858565b3480156200033557600080fd5b506200022c6200034736600462000d08565b62000915565b3480156200035a57600080fd5b50620002826200036c36600462000d08565b62000979565b620001cb6200038336600462000db5565b620009ce565b620001cb6200039a36600462000d08565b62000acb565b348015620003ad57600080fd5b506200022c620003bf36600462000d08565b62000c3e565b348015620003d257600080fd5b506200022c620003e436600462000d08565b62000c8f565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516305fe138b60e01b8152600481018490523360248201528291829182918291829182916305fe138b9060440160e060405180830381600087803b1580156200045f57600080fd5b505af115801562000474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049a919062000ddc565b96509650965096509650965096508486886001600160a01b03167fba8167b20fb82b32203505d2af31a84cccc310ee858a21f2b99a19b09956840c87878d8888604051620005139594939291909485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b60405180910390a4505050505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905163582cf78160e01b81526004810184905282919063582cf781906024015b602060405180830381600087803b1580156200058d57600080fd5b505af1158015620005a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005c8919062000e4c565b9050600080516020620041de83398151915281604051620005eb91815260200190565b60405180910390a19392505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051631ae6a0d760e11b815260048101849052829182918291906335cd41ae906024015b6040805180830381600087803b1580156200066457600080fd5b505af115801562000679573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200069f919062000e66565b91509150600080516020620041de83398151915281604051620006c491815260200190565b60405180910390a1909590945092505050565b6000838152600160205260408082205482546001600160a01b0319166001600160a01b039091169081179092555163a68bb24960e01b8152600481018490526024810183905233604482015263a68bb2499034906064016000604051808303818588803b1580156200074857600080fd5b505af11580156200075d573d6000803e3d6000fd5b5050505050600080516020620041de833981519152346040516200078391815260200190565b60405180910390a1505050565b60008281526001602090815260408083205483546001600160a01b0319166001600160a01b03909116908117845581516359bf5d3960e01b81529151849391926359bf5d3992600480830193919282900301818787803b1580156200058d57600080fd5b60008281526001602090815260408083205483546001600160a01b0319166001600160a01b039091169081178455815163022a446360e61b8152915184939192638a9118c092600480830193919282900301818787803b1580156200058d57600080fd5b6000848152600160205260408082205482546001600160a01b0319166001600160a01b039182169081179093559051635e16d9df60e01b815260048101869052602481018590529083166044820152635e16d9df9034906064016000604051808303818588803b158015620008cc57600080fd5b505af1158015620008e1573d6000803e3d6000fd5b5050505050600080516020620041de833981519152346040516200090791815260200190565b60405180910390a150505050565b60008281526001602090815260408083205483546001600160a01b0319166001600160a01b0390911690811784558151638703694360e01b8152915184939192638703694392600480830193919282900301818787803b1580156200058d57600080fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051635e9bc2f960e01b81526004810184905282918291829190635e9bc2f9906024016200064a565b80604051620009dd9062000ce0565b6001600160a01b039091168152602001604051809103906000f08015801562000a0a573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556003805484526001602052604080852080549094169092179092559054825491519093919091169133917ff86e3d2fc794443a042a24aab307e2450c5ea5ddde4894a5db19df1339e0e23b9190a4600080546040516001600160a01b03909116917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a260016003600082825462000ac3919062000e8b565b909155505050565b3481101562000b135760405162461bcd60e51b815260206004820152601060248201526f1d1bc81b1a5d1d1b1948185b5bdd5b9d60821b604482015260640160405180910390fd5b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590516364afce8760e11b81526004810184905233602482015282918291829182918291829163c95f9d0e90349060440160e0604051808303818588803b15801562000b8957600080fd5b505af115801562000b9e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000bc5919062000ddc565b96509650965096509650965096508486886001600160a01b03167f8df84fafdab28db8aea5e9eb3a42bac9e9dddfddf14d579c198c13489729e1e187878d8888604051620005139594939291909485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630a72275360e01b815260048101849052829190630a7227539060240162000572565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811783559051630de703e160e41b81526004810184905282919063de703e109060240162000572565b61332b8062000eb383390190565b60006020828403121562000d0157600080fd5b5035919050565b6000806040838503121562000d1c57600080fd5b50508035926020909101359150565b60008060006060848603121562000d4157600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811462000d6e57600080fd5b50565b6000806000806080858703121562000d8857600080fd5b843593506020850135925060408501359150606085013562000daa8162000d58565b939692955090935050565b60006020828403121562000dc857600080fd5b813562000dd58162000d58565b9392505050565b600080600080600080600060e0888a03121562000df857600080fd5b875162000e058162000d58565b80975050602088015195506040880151945060608801519350608088015162000e2e8162000d58565b8093505060a0880151915060c0880151905092959891949750929550565b60006020828403121562000e5f57600080fd5b5051919050565b6000806040838503121562000e7a57600080fd5b505080516020909101519092909150565b6000821982111562000ead57634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b506040516200332b3803806200332b8339810160408190526200003491620001cc565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d9160039162000118565b5080516200009390600490602084019062000118565b5050506001600160a01b038116620000aa57600080fd5b600680546001600160a01b0319166001600160a01b038316179055604051620000d390620001a7565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200023b565b8280546200012690620001fe565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001b5565b5090565b610d6280620025c983390190565b5b80821115620001a35760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b602082108114156200023557634e487b7160e01b600052602260045260246000fd5b50919050565b61237e806200024b6000396000f3fe6080604052600436106101b95760003560e01c80635fcbd285116100eb578063a457c2d71161008f578063cca3e83211610061578063cca3e832146104cd578063dd62ed3e146104ed578063de703e101461050d578063f835cd3c1461052d57005b8063a457c2d714610467578063a68bb24914610487578063a9059cbb1461049a578063c95f9d0e146104ba57005b80638a9118c0116100c85780638a9118c01461041957806394d0851d1461041f57806395d89b41146104325780639dc29fac1461044757005b80635fcbd285146103a357806370a08231146103db578063870369431461041157005b806335cd41ae1161015d578063582cf7811161012f578063582cf7811461036257806359bf5d39146103755780635e16d9df1461037d5780635e9bc2f91461039057005b806335cd41ae146102e5578063395093511461030d5780633eaaf86b1461032d57806340c10f191461034257005b80630a722753116101965780630a7227531461027357806318160ddd1461029457806323b872dd146102a9578063313ce567146102c957005b806305fe138b146101c257806306fdde0314610221578063095ea7b31461024357005b366101c057005b005b6101d56101d0366004612077565b61054d565b604080516001600160a01b03988916815260208101979097528601949094526060850192909252909316608083015260a082019290925260c081019190915260e0015b60405180910390f35b34801561022d57600080fd5b50610236610af3565b60405161021891906120a3565b34801561024f57600080fd5b5061026361025e3660046120f8565b610b85565b6040519015158152602001610218565b610286610281366004612122565b610b9d565b604051908152602001610218565b3480156102a057600080fd5b50600254610286565b3480156102b557600080fd5b506102636102c436600461213b565b610bb2565b3480156102d557600080fd5b5060405160128152602001610218565b6102f86102f3366004612122565b610bd6565b60408051928352602083019190915201610218565b34801561031957600080fd5b506102636103283660046120f8565b610c97565b34801561033957600080fd5b50610286610cb9565b34801561034e57600080fd5b506101c061035d3660046120f8565b610cc9565b610286610370366004612122565b610d0d565b610286610dcc565b6101c061038b366004612177565b610e52565b6102f861039e366004612122565b611136565b3480156103af57600080fd5b506005546103c3906001600160a01b031681565b6040516001600160a01b039091168152602001610218565b3480156103e757600080fd5b506102866103f63660046121ac565b6001600160a01b031660009081526020819052604090205490565b61028661116d565b47610286565b34801561042b57600080fd5b50306103c3565b34801561043e57600080fd5b5061023661117b565b34801561045357600080fd5b506101c06104623660046120f8565b61118a565b34801561047357600080fd5b506102636104823660046120f8565b6111ca565b6101c0610495366004612177565b611245565b3480156104a657600080fd5b506102636104b53660046120f8565b611441565b6101d56104c8366004612077565b61144f565b3480156104d957600080fd5b506102866104e83660046121ac565b6119ce565b3480156104f957600080fd5b506102866105083660046121c7565b6119ec565b34801561051957600080fd5b50610286610528366004612122565b611a17565b34801561053957600080fd5b506006546103c3906001600160a01b031681565b6000808080808080610563565b60405180910390fd5b600554604051632770a7eb60e21b81526001600160a01b038a81166004830152602482018c905290911690639dc29fac90604401600060405180830381600087803b1580156105b157600080fd5b505af11580156105c5573d6000803e3d6000fd5b505060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416955063095ea7b39450309390921691633eaaf86b91600480820192602092909190829003018186803b15801561061d57600080fd5b505afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065591906121f1565b6006546040516370a0823160e01b81523060048201528e916001600160a01b0316906370a082319060240160206040518083038186803b15801561069857600080fd5b505afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d091906121f1565b6106da9190612220565b6106e4919061223f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561072a57600080fd5b505af115801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190612261565b5060065460055460408051633eaaf86b60e01b815290516001600160a01b03938416936323b872dd9330938e939190921691633eaaf86b916004808301926020929190829003018186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f191906121f1565b6006546040516370a0823160e01b81523060048201528f916001600160a01b0316906370a082319060240160206040518083038186803b15801561083457600080fd5b505afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c91906121f1565b6108769190612220565b610880919061223f565b6040518463ffffffff1660e01b815260040161089e93929190612283565b602060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612261565b5060055460408051633eaaf86b60e01b815290516001600160a01b03808c16931691633eaaf86b916004808301926020929190829003018186803b15801561093757600080fd5b505afa15801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096f91906121f1565b6109798b47612220565b610983919061223f565b604051600081818185875af1925050503d80600081146109bf576040519150601f19603f3d011682016040523d82523d6000602084013e6109c4565b606091505b50505087600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e91906121f1565b600554604051636651f41960e11b81526001600160a01b038c811660048301528d924792911690819063cca3e8329060240160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad091906121f1565b610ad8610dcc565b96509650965096509650965096505b92959891949750929550565b606060038054610b02906122a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2e906122a7565b8015610b7b5780601f10610b5057610100808354040283529160200191610b7b565b820191906000526020600020905b815481529060010190602001808311610b5e57829003601f168201915b5050505050905090565b600033610b93818585611ac9565b5060019392505050565b600080610bab836063612220565b9392505050565b600033610bc0858285611bee565b610bcb858585611c68565b506001949350505050565b6000806000610be3610dcc565b90506000610bf185476122e2565b90506000610c00866063612220565b90506000610c0f836064612220565b9050600083118015610c215750600084115b610c3d5760405162461bcd60e51b815260040161055a906122f9565b6000610c498289612330565b610c538685612220565b610c5d919061223f565b905080887fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39795505050505050565b600033610b93818585610caa83836119ec565b610cb49190612330565b611ac9565b6000610cc460025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a3610d098282611e36565b5050565b600080610d18610dcc565b90506000610d2684476122e2565b90506000610d35856063612220565b90506000610d44836064612220565b9050600083118015610d565750600084115b610d725760405162461bcd60e51b815260040161055a906122f9565b6000610d7e8288612330565b610d888685612220565b610d92919061223f565b905080877fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6006546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c91906121f1565b92915050565b6000610e5c610dcc565b9050476000610e6c346063612220565b90506000610e7b846064612220565b9050600084118015610e8d5750600083115b610ea95760405162461bcd60e51b815260040161055a906122f9565b6000610eb58234612330565b610ebf8585612220565b610ec9919061223f565b905086811015610f1b5760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161055a565b60065460405163095ea7b360e01b81526001600160a01b0388811660048301523460248301529091169063095ea7b390604401602060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa09190612261565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610fd590899030903490600401612283565b602060405180830381600087803b158015610fef57600080fd5b505af1158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612261565b50600080876001600160a01b03168960405160006040518083038185875af1925050503d8060008114611076576040519150601f19603f3d011682016040523d82523d6000602084013e61107b565b606091505b50604051680e8ded6cadc5ecae8d60bb1b8152919350915060090160405190819003812060065485835290916001600160a01b038b81169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a4604080516001600160a01b038a168152602081018590528691869189917f442eeca641ffac06d7005f2ef6bc3f115b4e51a3324d56430545e2561f174f75910160405180910390a450505050505050505050565b6000808061114484476122e2565b9050600081611151610dcc565b61115b9087612220565b611165919061223f565b959350505050565b600080610e4c476064612220565b606060048054610b02906122a7565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a3610d098282611f15565b600033816111d882866119ec565b9050838110156112385760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161055a565b610bcb8286868403611ac9565b600061124f610dcc565b9050600061125d34476122e2565b9050600061126c346063612220565b9050600061127b836064612220565b905060008311801561128d5750600084115b6112a95760405162461bcd60e51b815260040161055a906122f9565b60006112b58234612330565b6112bf8685612220565b6112c9919061223f565b60065460405163095ea7b360e01b8152306004820152602481018a90529192506001600160a01b03169063095ea7b390604401602060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190612261565b506006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906113839030908a908c90600401612283565b602060405180830381600087803b15801561139d57600080fd5b505af11580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190612261565b506040516832ba3417ba37b5b2b760b91b81526009016040519081900381206006548a835290916001600160a01b038981169216907fce9f99712c8bc2e049d7626ab6410b1a43910ca5354c5de77a14024599156ba89060200160405180910390a45050505050505050565b600033610b93818585611c68565b60008080808080808061146234476122e2565b905061146c610dcc565b61167c576005546040516340c10f1960e01b81526001600160a01b038b81166004830152602482018d9052909116906340c10f1990604401600060405180830381600087803b1580156114be57600080fd5b505af11580156114d2573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061150a908c9030908f90600401612283565b602060405180830381600087803b15801561152457600080fd5b505af1158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155c9190612261565b5060055460408051633eaaf86b60e01b815290518b926001600160a01b031691633eaaf86b916004808301926020929190829003018186803b1580156115a157600080fd5b505afa1580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d991906121f1565b6115e1610dcc565b600554604051636651f41960e11b81526001600160a01b038e8116600483015247921690819063cca3e8329060240160206040518083038186803b15801561162857600080fd5b505afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166091906121f1565b611668610dcc565b975097509750975097509750975050610ae7565b80611685610dcc565b61168f9034612220565b611699919061223f565b8a101561170e5760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e7420616363657074656400000000606482015260840161055a565b6006546001600160a01b03166323b872dd8a308461172a610dcc565b6117349034612220565b61173e919061223f565b6040518463ffffffff1660e01b815260040161175c93929190612283565b602060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae9190612261565b5060055460408051633eaaf86b60e01b815290516001600160a01b03909216916340c10f19918c91859134918691633eaaf86b916004808301926020929190829003018186803b15801561180157600080fd5b505afa158015611815573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183991906121f1565b6118439190612220565b61184d919061223f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561189357600080fd5b505af11580156118a7573d6000803e3d6000fd5b5050505088600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193291906121f1565b8234600560009054906101000a90046001600160a01b03166001600160a01b0316633eaaf86b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561198257600080fd5b505afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba91906121f1565b6119c49190612220565b6115e1919061223f565b6001600160a01b038116600090815260208190526040812054610e4c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600080611a22610dcc565b9050476000611a32856063612220565b90506000611a41846064612220565b9050600084118015611a535750600083115b611a6f5760405162461bcd60e51b815260040161055a906122f9565b6000611a7b8288612330565b611a858585612220565b611a8f919061223f565b905081817fcfaa9fe844caafbeed42965f22ddbb67532fa515e7284d5c317af5c8ab8d3e9e60405160405180910390a39695505050505050565b6001600160a01b038316611b2b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161055a565b6001600160a01b038216611b8c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161055a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611bfa84846119ec565b90506000198114611c625781811015611c555760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161055a565b611c628484848403611ac9565b50505050565b6001600160a01b038316611ccc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161055a565b6001600160a01b038216611d2e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161055a565b6001600160a01b03831660009081526020819052604090205481811015611da65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161055a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611ddd908490612330565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e2991815260200190565b60405180910390a3611c62565b6001600160a01b038216611e8c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161055a565b8060026000828254611e9e9190612330565b90915550506001600160a01b03821660009081526020819052604081208054839290611ecb908490612330565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216611f755760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161055a565b6001600160a01b03821660009081526020819052604090205481811015611fe95760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161055a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906120189084906122e2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611be1565b80356001600160a01b038116811461207257600080fd5b919050565b6000806040838503121561208a57600080fd5b8235915061209a6020840161205b565b90509250929050565b600060208083528351808285015260005b818110156120d0578581018301518582016040015282016120b4565b818111156120e2576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561210b57600080fd5b6121148361205b565b946020939093013593505050565b60006020828403121561213457600080fd5b5035919050565b60008060006060848603121561215057600080fd5b6121598461205b565b92506121676020850161205b565b9150604084013590509250925092565b60008060006060848603121561218c57600080fd5b83359250602084013591506121a36040850161205b565b90509250925092565b6000602082840312156121be57600080fd5b610bab8261205b565b600080604083850312156121da57600080fd5b6121e38361205b565b915061209a6020840161205b565b60006020828403121561220357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561223a5761223a61220a565b500290565b60008261225c57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561227357600080fd5b81518015158114610bab57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c908216806122bb57607f821691505b602082108114156122dc57634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156122f4576122f461220a565b500390565b60208082526017908201527f696e76616c696465207265736572766520616d6f756e74000000000000000000604082015260600190565b600082198211156123435761234361220a565b50019056fea2646970667358221220d75d7772459e7671cb972ef6bf7cca2c1d1e51090107c842b8b30500f8a92c8e64736f6c6343000808003360806040523480156200001157600080fd5b50604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200005b916003916200007a565b508051620000719060049060208401906200007a565b5050506200015d565b828054620000889062000120565b90600052602060002090601f016020900481019282620000ac5760008555620000f7565b82601f10620000c757805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f7578251825591602001919060010190620000da565b506200010592915062000109565b5090565b5b808211156200010557600081556001016200010a565b600181811c908216806200013557607f821691505b602082108114156200015757634e487b7160e01b600052602260045260246000fd5b50919050565b610bf5806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101fc578063a9059cbb1461020f578063cca3e832146101aa578063dd62ed3e1461022257600080fd5b806370a08231146101aa57806394d0851d146101d357806395d89b41146101e15780639dc29fac146101e957600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780633eaaf86b1461018d57806340c10f191461019557600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610235565b60405161011a9190610a13565b60405180910390f35b610136610131366004610a84565b6102c7565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610aae565b6102df565b6040516012815260200161011a565b610136610188366004610a84565b610303565b61014a610325565b6101a86101a3366004610a84565b610335565b005b61014a6101b8366004610aea565b6001600160a01b031660009081526020819052604090205490565b60405130815260200161011a565b61010d610379565b6101a86101f7366004610a84565b610388565b61013661020a366004610a84565b6103c8565b61013661021d366004610a84565b610448565b61014a610230366004610b0c565b610456565b60606003805461024490610b3f565b80601f016020809104026020016040519081016040528092919081815260200182805461027090610b3f565b80156102bd5780601f10610292576101008083540402835291602001916102bd565b820191906000526020600020905b8154815290600101906020018083116102a057829003601f168201915b5050505050905090565b6000336102d5818585610481565b5060019392505050565b6000336102ed8582856105a6565b6102f8858585610620565b506001949350505050565b6000336102d58185856103168383610456565b6103209190610b90565b610481565b600061033060025490565b905090565b60405181906001600160a01b038416907fb7656808f0e04b4af7a20f7ef1caa7669f0d781f1ca4cba31a3ba467880766c990600090a361037582826107ee565b5050565b60606004805461024490610b3f565b60405181906001600160a01b038416907f8b1897d4e7a3b42570088bb1182eb6518c96a754d44bc9edd4669568bfa9832690600090a361037582826108cd565b600033816103d68286610456565b90508381101561043b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102f88286868403610481565b6000336102d5818585610620565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610432565b6001600160a01b0382166105445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610432565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105b28484610456565b9050600019811461061a578181101561060d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610432565b61061a8484848403610481565b50505050565b6001600160a01b0383166106845760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610432565b6001600160a01b0382166106e65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610432565b6001600160a01b0383166000908152602081905260409020548181101561075e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610432565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610795908490610b90565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107e191815260200190565b60405180910390a361061a565b6001600160a01b0382166108445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610432565b80600260008282546108569190610b90565b90915550506001600160a01b03821660009081526020819052604081208054839290610883908490610b90565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03821661092d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610432565b6001600160a01b038216600090815260208190526040902054818110156109a15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610432565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109d0908490610ba8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610599565b600060208083528351808285015260005b81811015610a4057858101830151858201604001528201610a24565b81811115610a52576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a7f57600080fd5b919050565b60008060408385031215610a9757600080fd5b610aa083610a68565b946020939093013593505050565b600080600060608486031215610ac357600080fd5b610acc84610a68565b9250610ada60208501610a68565b9150604084013590509250925092565b600060208284031215610afc57600080fd5b610b0582610a68565b9392505050565b60008060408385031215610b1f57600080fd5b610b2883610a68565b9150610b3660208401610a68565b90509250929050565b600181811c90821680610b5357607f821691505b60208210811415610b7457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ba357610ba3610b7a565b500190565b600082821015610bba57610bba610b7a565b50039056fea2646970667358221220c1cad5f121f7371680e535ac51af499ee9735c4dcda66ea809a69819c1245be564736f6c634300080800333c997e25e3fcbbf139bd19b21a519faded9566e7faa33e5eda2d70d3edb95250a2646970667358221220b16c439ac0d5cb50ce8eb2c1632fe6e6c903feaf14d6858e38c448f431dcceca64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/Dex.sol:Dex",
        "label": "pool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Pool)2339"
      },
      {
        "astId": 786,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Pool)2339)"
      },
      {
        "astId": 790,
        "contract": "contracts/Dex.sol:Dex",
        "label": "PoolMappingAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 792,
        "contract": "contracts/Dex.sol:Dex",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Pool)2339": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_contract(Pool)2339)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Pool)",
        "numberOfBytes": "32",
        "value": "t_contract(Pool)2339"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}