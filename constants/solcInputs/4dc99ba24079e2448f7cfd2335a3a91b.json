{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Dex.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./Pool.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Dex {\n    Pool public  pool;\n    \n    event userAddress (address indexed _useraddress);\n    event createPoolEvent (address indexed _createBy, address indexed _token ,uint256 indexed _id);\n    event liquidity (address indexed _from, uint256 indexed _amount, uint256 indexed _mintedAmount);\n    mapping (uint256 => Pool) public PoolMapping;\n    mapping (uint256 => address) public PoolMappingAddress;\n    uint256 public counter;\n\n    constructor () payable{}\n\n     function getPoolAddress(uint256 _pool) public view returns(address){\n        return address(PoolMapping[_pool]);\n    }\n\n    function createPool(address tokenA) public payable {\n        pool = new Pool(tokenA);\n        PoolMapping[counter] = pool;\n        emit createPoolEvent(msg.sender, address(pool), counter);\n        emit userAddress (address(pool));\n        counter += 1;\n    }\n    \n    function _addLiquidity(uint256 _pool, uint256 _amount) public payable {\n        require(_amount >= msg.value, \"to little amount\");\n        pool =  Pool(payable(address(PoolMapping[_pool])));\n        // emit userAddress(address(pool));\n        (address from, uint256 amount, uint256 _estimatedAmount) = pool.addLiquidity{ value: msg.value }(_amount, msg.sender);\n        emit liquidity(from, amount, _estimatedAmount);\n    }\n\n    function _removeLiquidity(uint256 _pool, uint256 _amount) public payable{\n        pool = Pool(payable(address(PoolMapping[_pool]))); \n        pool.removeLiquidity(_amount, msg.sender);\n    }\n\n    function _swapTokenToEth(uint256 _pool, uint256 _amount, uint256 _estimatedAmount)  public payable{\n        pool = Pool(payable(address(PoolMapping[_pool])));\n        pool.swapTokenToEth{ value: msg.value }(_amount, _estimatedAmount, msg.sender);\n        //if true return the values needed here in an event\n    }\n\n    function _swapEthToToken(uint256 _pool, uint256 _amount)  public payable{\n        pool = Pool(payable(address(PoolMapping[_pool])));\n        pool.swapEthToToken{ value: msg.value }(_amount, msg.sender);\n    }\n    \n    function _getSwapAmount(uint256 _pool, uint256 _amount)  public returns (uint256){\n        pool = Pool(payable(address(PoolMapping[_pool])));\n        pool.getSwapAmountDai(_amount);\n    }\n    function _getSwapAmountEth(uint256 _pool, uint256 _amount)  public payable returns (uint256){\n        pool = Pool(payable(address(PoolMapping[_pool])));\n        pool.getSwapAmountEth{value: msg.value }(_amount);\n    }\n}\n"
    },
    "contracts/LIToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract LIToken is ERC20{\n    event minted(address indexed _user, uint256 indexed _amount);\n    event burned(address indexed _user, uint256 indexed _amount);\n\n    constructor() ERC20('Lp', 'LPToken'){\n    }\n\n    function mint(address _sender, uint256 _amount) external {\n        emit minted(_sender, _amount);\n        _mint(_sender, _amount);\n    }\n\n    function burn(address _sender, uint256 _amount) external {\n         emit burned(_sender, _amount);\n        _burn(_sender, _amount);\n    }\n\n    function _totalSupply() public view returns(uint256){\n         return totalSupply();\n    }\n}"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./LIToken.sol\";\n\n//Skapa den här kontrakten som en pool istället och den här poolen har alltså sin egna address.\n//Poolen ska därefter kunna kallas från en annan Kontrakt som ska vara själva Dex och ta hand om varje pool som exisiterar.\n//Därför gör om denna kontrakt så att den är kopplad till eth msg.value() istället för \"weth\" sen skapa den riktiga Dex \"manage\" kontrakten.\n//I Dex kontraktet spara alla olika pools i en mapping och kalla deras funktioner med hjälp av en \n\ncontract Pool is IERC20, LIToken {\n    LIToken public lpToken;\n\n    fallback() external payable {}\n    receive() external payable {}\n\n    address public erc20TokenAddress;\n    mapping(address => uint256) WethMapping;\n    event tokenSwap(address indexed token, address indexed swapper, string indexed swap, uint256 _amount);\n    event liquidityPool( uint256 indexed amount, address indexed provider, uint256 indexed reserve);\n    //event liquidityWidthdraw( uint256 indexed _amount, address indexed _to);\n    //event addressBalance(address indexed token, uint256 indexed _amount, address indexed _address);\n    event balancesCheck(address _from, uint256 indexed totalSupply, uint256 indexed ethBalance, uint256 indexed ethBackToUser, uint256 liquidityBackToUser);\n    event balanceCall(uint256 indexed _amount, uint256 indexed _secondamount);\n  //  event userInPoolAddress(address indexed _caller);\n    //event transferSwap(uint256 _amount, bytes data, bool call);\n\n    constructor(address _erc20TokenAddress) {\n        require(_erc20TokenAddress != address(0));\n        erc20TokenAddress = _erc20TokenAddress;\n        lpToken = new LIToken();\n    }\n\n    function getReserve() public payable returns(uint256) {\n        uint256 balaceGet = IERC20(erc20TokenAddress).balanceOf(address(this));\n       // emit balanceCall(balaceGet);\n        return balaceGet;\n    }\n    /*function getEthReserve() public payable returns(uint256) {\n        uint256 balaceGet = address(this).balance;\n        emit balanceCall(balaceGet);\n        return address(this).balance;\n    }\n    function getAddress() public payable returns (address){\n        return erc20TokenAddress;\n    }\n    function getLiquidityAddress() public payable returns (address){\n        return address(lpToken);\n    }*/\n\n    function addLiquidity (uint _amount, address _sender) public payable returns (address, uint256, uint256) {\n        uint256 daiReserve = getReserve();\n        \n        \n        if(daiReserve == 0){\n            lpToken.mint(_sender, _amount);\n            IERC20(erc20TokenAddress).transferFrom(_sender, address(this), _amount);\n            // emit balancesCheck(_sender, _amount, daiReserve, _ethReserve, msg.value);\n        //    emit liquidityPool( _amount, _sender, 1);\n           return (_sender, _amount, daiReserve);\n        }else{\n        uint256 _ethReserve = address(this).balance - msg.value;\n        uint256 acceptedLiquidityAmount = (msg.value * daiReserve) / (_ethReserve);\n        require(_amount >= acceptedLiquidityAmount, \"not accepted liquidity less then the minimum amount accepted\");\n        /*IERC20(erc20TokenAddress).approve(address(this), acceptedLiquidityAmount);*/\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), acceptedLiquidityAmount);\n        uint256 mintokens = (lpToken._totalSupply() * msg.value) / (_ethReserve);\n        lpToken.mint(_sender, mintokens);    \n        emit balancesCheck(_sender, _amount, acceptedLiquidityAmount, _ethReserve, msg.value);\n      \n        return (_sender, _amount, acceptedLiquidityAmount);\n        }\n       \n    }\n    // remove liquidity\n    function removeLiquidity(uint _amount, address _sender) public {\n        require(_amount >= 0, \"to little amount\");  \n        uint256 ethReserve = address(this).balance;\n        uint256 totalSupply = lpToken._totalSupply();\n        uint256 erc20TokenReserve = IERC20(erc20TokenAddress).balanceOf(address(this));\n        uint256 ethBackToUser = (ethReserve * _amount) / totalSupply;\n        uint256 ldtokenBackToUser = (erc20TokenReserve * _amount) / totalSupply;\n        lpToken.burn(_sender, _amount);\n        IERC20(erc20TokenAddress).approve(address(this), ldtokenBackToUser);\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, ldtokenBackToUser);\n        (bool call, bytes memory data) = _sender.call{value: ethBackToUser}(\"\");\n       // emit liquidityPool(_amount, _sender, ldtokenBackToUser);\n        emit balancesCheck (_sender, _amount, ethReserve ,ethBackToUser, ldtokenBackToUser);\n    }\n   \n\n     function getSwapAmountEth(uint256 _amount) public payable returns (uint256){\n        uint256 erc20Reserve = getReserve();\n        uint256 ethReserve = address(this).balance - _amount;\n        uint256 inputAmountFee = _amount * 99;\n        uint256 fullEthReserve = ethReserve * 100;\n\n        require(ethReserve > 0 && erc20Reserve > 0, \"invalide reserve amount\");\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (_amount + fullEthReserve);\n       // emit balancesCheck (ethReserve, _amount ,inputAmountFee, outputAmount);\n        emit balanceCall(_amount, outputAmount);\n        return outputAmount;\n    }\n\n    function getSwapAmountDai(uint256 _amount) public returns (uint256){\n        uint256 erc20Reserve = getReserve();\n        uint256 ethReserve = address(this).balance;\n        uint256 inputAmountFee = _amount * 99;\n        uint256 fullErc20Reserve = erc20Reserve * 100;\n        require(erc20Reserve > 0 && ethReserve > 0, \"invalide reserve amount\");\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\n        //emit balancesCheck (ethReserve, erc20Reserve ,inputAmountFee, outputAmount);\n        emit balanceCall(outputAmount, fullErc20Reserve);\n        return outputAmount;\n    }\n\n    function swapEthToToken(uint256 _amount, address _sender) public payable{\n        uint256 erc20Reserve = getReserve();\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 inputAmountFee = msg.value * 99;\n        uint256 fullEthReserve = ethReserve * 100;\n        require(ethReserve > 0 && erc20Reserve > 0, \"invalide reserve amount\");\n        uint256 outputAmount = (inputAmountFee * erc20Reserve) / (msg.value + fullEthReserve);\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\n        require(outputAmount >= _amount, \"to little amount for swapping\");\n        IERC20(erc20TokenAddress).approve(address(this), outputAmount);\n        IERC20(erc20TokenAddress).transferFrom(address(this), _sender, outputAmount);\n        emit tokenSwap(erc20TokenAddress, _sender, \"eth/token\", outputAmount);\n    }\n\n    function swapTokenToEth(uint256 _amount, uint256 _ethBackToUser ,address _sender) public payable{\n        uint256 erc20Reserve = getReserve();\n        uint256 ethReserve = address(this).balance;\n        uint256 inputAmountFee = _amount * 99;\n        uint256 fullErc20Reserve = erc20Reserve * 100;\n        require(erc20Reserve > 0 && ethReserve > 0, \"invalide reserve amount\");\n        uint256 outputAmount = (inputAmountFee * ethReserve) / (_amount + fullErc20Reserve);\n        //uint256 totalAmountwithfee = (outputAmount * 99) / 100;\n        require(outputAmount >= _ethBackToUser, \"to little amount for swapping\");\n        IERC20(erc20TokenAddress).approve(_sender, outputAmount);\n        IERC20(erc20TokenAddress).transferFrom(_sender, address(this), outputAmount);\n        (bool call, bytes memory data) = _sender.call{value: outputAmount}(\"\");\n        //emit transferSwap(outputAmount, data, call);\n        emit tokenSwap(erc20TokenAddress, _sender, \"token/eth\", outputAmount);\n        emit balancesCheck (_sender, ethReserve, fullErc20Reserve ,inputAmountFee, outputAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}